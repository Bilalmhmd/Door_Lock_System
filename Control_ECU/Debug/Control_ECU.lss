
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001470  00001504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006e  0080006e  00001512  2**0
                  ALLOC
  3 .stab         0000267c  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001769  00000000  00000000  00003b90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 37       	cpi	r26, 0x75	; 117
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 07 	call	0xeb0	; 0xeb0 <main>
      8a:	0c 94 36 0a 	jmp	0x146c	; 0x146c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PWM_Timer0_Start>:
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */

void PWM_Timer0_Start(uint8 duty_cycle)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
      9e:	e2 e5       	ldi	r30, 0x52	; 82
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	10 82       	st	Z, r1

	OCR0  = duty_cycle; // Set Compare Value
      a4:	ec e5       	ldi	r30, 0x5C	; 92
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	89 81       	ldd	r24, Y+1	; 0x01
      aa:	80 83       	st	Z, r24

	//set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
	DDRB  = DDRB | (1<<PB3);
      ac:	a7 e3       	ldi	r26, 0x37	; 55
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	e7 e3       	ldi	r30, 0x37	; 55
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	88 60       	ori	r24, 0x08	; 8
      b8:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
      ba:	e3 e5       	ldi	r30, 0x53	; 83
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	8a e6       	ldi	r24, 0x6A	; 106
      c0:	80 83       	st	Z, r24
}
      c2:	0f 90       	pop	r0
      c4:	cf 91       	pop	r28
      c6:	df 91       	pop	r29
      c8:	08 95       	ret

000000ca <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
      ca:	df 93       	push	r29
      cc:	cf 93       	push	r28
      ce:	00 d0       	rcall	.+0      	; 0xd0 <GPIO_setupPinDirection+0x6>
      d0:	00 d0       	rcall	.+0      	; 0xd2 <GPIO_setupPinDirection+0x8>
      d2:	0f 92       	push	r0
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	89 83       	std	Y+1, r24	; 0x01
      da:	6a 83       	std	Y+2, r22	; 0x02
      dc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
      de:	8a 81       	ldd	r24, Y+2	; 0x02
      e0:	88 30       	cpi	r24, 0x08	; 8
      e2:	08 f0       	brcs	.+2      	; 0xe6 <GPIO_setupPinDirection+0x1c>
      e4:	d5 c0       	rjmp	.+426    	; 0x290 <GPIO_setupPinDirection+0x1c6>
      e6:	89 81       	ldd	r24, Y+1	; 0x01
      e8:	84 30       	cpi	r24, 0x04	; 4
      ea:	08 f0       	brcs	.+2      	; 0xee <GPIO_setupPinDirection+0x24>
      ec:	d1 c0       	rjmp	.+418    	; 0x290 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
      ee:	89 81       	ldd	r24, Y+1	; 0x01
      f0:	28 2f       	mov	r18, r24
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	3d 83       	std	Y+5, r19	; 0x05
      f6:	2c 83       	std	Y+4, r18	; 0x04
      f8:	8c 81       	ldd	r24, Y+4	; 0x04
      fa:	9d 81       	ldd	r25, Y+5	; 0x05
      fc:	81 30       	cpi	r24, 0x01	; 1
      fe:	91 05       	cpc	r25, r1
     100:	09 f4       	brne	.+2      	; 0x104 <GPIO_setupPinDirection+0x3a>
     102:	43 c0       	rjmp	.+134    	; 0x18a <GPIO_setupPinDirection+0xc0>
     104:	2c 81       	ldd	r18, Y+4	; 0x04
     106:	3d 81       	ldd	r19, Y+5	; 0x05
     108:	22 30       	cpi	r18, 0x02	; 2
     10a:	31 05       	cpc	r19, r1
     10c:	2c f4       	brge	.+10     	; 0x118 <GPIO_setupPinDirection+0x4e>
     10e:	8c 81       	ldd	r24, Y+4	; 0x04
     110:	9d 81       	ldd	r25, Y+5	; 0x05
     112:	00 97       	sbiw	r24, 0x00	; 0
     114:	71 f0       	breq	.+28     	; 0x132 <GPIO_setupPinDirection+0x68>
     116:	bc c0       	rjmp	.+376    	; 0x290 <GPIO_setupPinDirection+0x1c6>
     118:	2c 81       	ldd	r18, Y+4	; 0x04
     11a:	3d 81       	ldd	r19, Y+5	; 0x05
     11c:	22 30       	cpi	r18, 0x02	; 2
     11e:	31 05       	cpc	r19, r1
     120:	09 f4       	brne	.+2      	; 0x124 <GPIO_setupPinDirection+0x5a>
     122:	5f c0       	rjmp	.+190    	; 0x1e2 <GPIO_setupPinDirection+0x118>
     124:	8c 81       	ldd	r24, Y+4	; 0x04
     126:	9d 81       	ldd	r25, Y+5	; 0x05
     128:	83 30       	cpi	r24, 0x03	; 3
     12a:	91 05       	cpc	r25, r1
     12c:	09 f4       	brne	.+2      	; 0x130 <GPIO_setupPinDirection+0x66>
     12e:	85 c0       	rjmp	.+266    	; 0x23a <GPIO_setupPinDirection+0x170>
     130:	af c0       	rjmp	.+350    	; 0x290 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     132:	8b 81       	ldd	r24, Y+3	; 0x03
     134:	81 30       	cpi	r24, 0x01	; 1
     136:	a1 f4       	brne	.+40     	; 0x160 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     138:	aa e3       	ldi	r26, 0x3A	; 58
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	ea e3       	ldi	r30, 0x3A	; 58
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	48 2f       	mov	r20, r24
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	28 2f       	mov	r18, r24
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	02 2e       	mov	r0, r18
     150:	02 c0       	rjmp	.+4      	; 0x156 <GPIO_setupPinDirection+0x8c>
     152:	88 0f       	add	r24, r24
     154:	99 1f       	adc	r25, r25
     156:	0a 94       	dec	r0
     158:	e2 f7       	brpl	.-8      	; 0x152 <GPIO_setupPinDirection+0x88>
     15a:	84 2b       	or	r24, r20
     15c:	8c 93       	st	X, r24
     15e:	98 c0       	rjmp	.+304    	; 0x290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     160:	aa e3       	ldi	r26, 0x3A	; 58
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	ea e3       	ldi	r30, 0x3A	; 58
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	48 2f       	mov	r20, r24
     16c:	8a 81       	ldd	r24, Y+2	; 0x02
     16e:	28 2f       	mov	r18, r24
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	02 2e       	mov	r0, r18
     178:	02 c0       	rjmp	.+4      	; 0x17e <GPIO_setupPinDirection+0xb4>
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	0a 94       	dec	r0
     180:	e2 f7       	brpl	.-8      	; 0x17a <GPIO_setupPinDirection+0xb0>
     182:	80 95       	com	r24
     184:	84 23       	and	r24, r20
     186:	8c 93       	st	X, r24
     188:	83 c0       	rjmp	.+262    	; 0x290 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     18a:	8b 81       	ldd	r24, Y+3	; 0x03
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	a1 f4       	brne	.+40     	; 0x1b8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     190:	a7 e3       	ldi	r26, 0x37	; 55
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	e7 e3       	ldi	r30, 0x37	; 55
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	48 2f       	mov	r20, r24
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	28 2f       	mov	r18, r24
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	02 2e       	mov	r0, r18
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <GPIO_setupPinDirection+0xe4>
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	0a 94       	dec	r0
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <GPIO_setupPinDirection+0xe0>
     1b2:	84 2b       	or	r24, r20
     1b4:	8c 93       	st	X, r24
     1b6:	6c c0       	rjmp	.+216    	; 0x290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     1b8:	a7 e3       	ldi	r26, 0x37	; 55
     1ba:	b0 e0       	ldi	r27, 0x00	; 0
     1bc:	e7 e3       	ldi	r30, 0x37	; 55
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	48 2f       	mov	r20, r24
     1c4:	8a 81       	ldd	r24, Y+2	; 0x02
     1c6:	28 2f       	mov	r18, r24
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	02 2e       	mov	r0, r18
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <GPIO_setupPinDirection+0x10c>
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	0a 94       	dec	r0
     1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <GPIO_setupPinDirection+0x108>
     1da:	80 95       	com	r24
     1dc:	84 23       	and	r24, r20
     1de:	8c 93       	st	X, r24
     1e0:	57 c0       	rjmp	.+174    	; 0x290 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     1e2:	8b 81       	ldd	r24, Y+3	; 0x03
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	a1 f4       	brne	.+40     	; 0x210 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     1e8:	a4 e3       	ldi	r26, 0x34	; 52
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	e4 e3       	ldi	r30, 0x34	; 52
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	48 2f       	mov	r20, r24
     1f4:	8a 81       	ldd	r24, Y+2	; 0x02
     1f6:	28 2f       	mov	r18, r24
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	02 2e       	mov	r0, r18
     200:	02 c0       	rjmp	.+4      	; 0x206 <GPIO_setupPinDirection+0x13c>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	0a 94       	dec	r0
     208:	e2 f7       	brpl	.-8      	; 0x202 <GPIO_setupPinDirection+0x138>
     20a:	84 2b       	or	r24, r20
     20c:	8c 93       	st	X, r24
     20e:	40 c0       	rjmp	.+128    	; 0x290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     210:	a4 e3       	ldi	r26, 0x34	; 52
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	e4 e3       	ldi	r30, 0x34	; 52
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	80 81       	ld	r24, Z
     21a:	48 2f       	mov	r20, r24
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
     21e:	28 2f       	mov	r18, r24
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	02 2e       	mov	r0, r18
     228:	02 c0       	rjmp	.+4      	; 0x22e <GPIO_setupPinDirection+0x164>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	0a 94       	dec	r0
     230:	e2 f7       	brpl	.-8      	; 0x22a <GPIO_setupPinDirection+0x160>
     232:	80 95       	com	r24
     234:	84 23       	and	r24, r20
     236:	8c 93       	st	X, r24
     238:	2b c0       	rjmp	.+86     	; 0x290 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     23a:	8b 81       	ldd	r24, Y+3	; 0x03
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	a1 f4       	brne	.+40     	; 0x268 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     240:	a1 e3       	ldi	r26, 0x31	; 49
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e1 e3       	ldi	r30, 0x31	; 49
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	48 2f       	mov	r20, r24
     24c:	8a 81       	ldd	r24, Y+2	; 0x02
     24e:	28 2f       	mov	r18, r24
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	02 2e       	mov	r0, r18
     258:	02 c0       	rjmp	.+4      	; 0x25e <GPIO_setupPinDirection+0x194>
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	0a 94       	dec	r0
     260:	e2 f7       	brpl	.-8      	; 0x25a <GPIO_setupPinDirection+0x190>
     262:	84 2b       	or	r24, r20
     264:	8c 93       	st	X, r24
     266:	14 c0       	rjmp	.+40     	; 0x290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     268:	a1 e3       	ldi	r26, 0x31	; 49
     26a:	b0 e0       	ldi	r27, 0x00	; 0
     26c:	e1 e3       	ldi	r30, 0x31	; 49
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	48 2f       	mov	r20, r24
     274:	8a 81       	ldd	r24, Y+2	; 0x02
     276:	28 2f       	mov	r18, r24
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 2e       	mov	r0, r18
     280:	02 c0       	rjmp	.+4      	; 0x286 <GPIO_setupPinDirection+0x1bc>
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	0a 94       	dec	r0
     288:	e2 f7       	brpl	.-8      	; 0x282 <GPIO_setupPinDirection+0x1b8>
     28a:	80 95       	com	r24
     28c:	84 23       	and	r24, r20
     28e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	cf 91       	pop	r28
     29c:	df 91       	pop	r29
     29e:	08 95       	ret

000002a0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     2a0:	df 93       	push	r29
     2a2:	cf 93       	push	r28
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <GPIO_writePin+0x6>
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <GPIO_writePin+0x8>
     2a8:	0f 92       	push	r0
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	89 83       	std	Y+1, r24	; 0x01
     2b0:	6a 83       	std	Y+2, r22	; 0x02
     2b2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     2b4:	8a 81       	ldd	r24, Y+2	; 0x02
     2b6:	88 30       	cpi	r24, 0x08	; 8
     2b8:	08 f0       	brcs	.+2      	; 0x2bc <GPIO_writePin+0x1c>
     2ba:	d5 c0       	rjmp	.+426    	; 0x466 <GPIO_writePin+0x1c6>
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	84 30       	cpi	r24, 0x04	; 4
     2c0:	08 f0       	brcs	.+2      	; 0x2c4 <GPIO_writePin+0x24>
     2c2:	d1 c0       	rjmp	.+418    	; 0x466 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	28 2f       	mov	r18, r24
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	3d 83       	std	Y+5, r19	; 0x05
     2cc:	2c 83       	std	Y+4, r18	; 0x04
     2ce:	8c 81       	ldd	r24, Y+4	; 0x04
     2d0:	9d 81       	ldd	r25, Y+5	; 0x05
     2d2:	81 30       	cpi	r24, 0x01	; 1
     2d4:	91 05       	cpc	r25, r1
     2d6:	09 f4       	brne	.+2      	; 0x2da <GPIO_writePin+0x3a>
     2d8:	43 c0       	rjmp	.+134    	; 0x360 <GPIO_writePin+0xc0>
     2da:	2c 81       	ldd	r18, Y+4	; 0x04
     2dc:	3d 81       	ldd	r19, Y+5	; 0x05
     2de:	22 30       	cpi	r18, 0x02	; 2
     2e0:	31 05       	cpc	r19, r1
     2e2:	2c f4       	brge	.+10     	; 0x2ee <GPIO_writePin+0x4e>
     2e4:	8c 81       	ldd	r24, Y+4	; 0x04
     2e6:	9d 81       	ldd	r25, Y+5	; 0x05
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	71 f0       	breq	.+28     	; 0x308 <GPIO_writePin+0x68>
     2ec:	bc c0       	rjmp	.+376    	; 0x466 <GPIO_writePin+0x1c6>
     2ee:	2c 81       	ldd	r18, Y+4	; 0x04
     2f0:	3d 81       	ldd	r19, Y+5	; 0x05
     2f2:	22 30       	cpi	r18, 0x02	; 2
     2f4:	31 05       	cpc	r19, r1
     2f6:	09 f4       	brne	.+2      	; 0x2fa <GPIO_writePin+0x5a>
     2f8:	5f c0       	rjmp	.+190    	; 0x3b8 <GPIO_writePin+0x118>
     2fa:	8c 81       	ldd	r24, Y+4	; 0x04
     2fc:	9d 81       	ldd	r25, Y+5	; 0x05
     2fe:	83 30       	cpi	r24, 0x03	; 3
     300:	91 05       	cpc	r25, r1
     302:	09 f4       	brne	.+2      	; 0x306 <GPIO_writePin+0x66>
     304:	85 c0       	rjmp	.+266    	; 0x410 <GPIO_writePin+0x170>
     306:	af c0       	rjmp	.+350    	; 0x466 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	a1 f4       	brne	.+40     	; 0x336 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     30e:	ab e3       	ldi	r26, 0x3B	; 59
     310:	b0 e0       	ldi	r27, 0x00	; 0
     312:	eb e3       	ldi	r30, 0x3B	; 59
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	80 81       	ld	r24, Z
     318:	48 2f       	mov	r20, r24
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	28 2f       	mov	r18, r24
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 2e       	mov	r0, r18
     326:	02 c0       	rjmp	.+4      	; 0x32c <GPIO_writePin+0x8c>
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	0a 94       	dec	r0
     32e:	e2 f7       	brpl	.-8      	; 0x328 <GPIO_writePin+0x88>
     330:	84 2b       	or	r24, r20
     332:	8c 93       	st	X, r24
     334:	98 c0       	rjmp	.+304    	; 0x466 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     336:	ab e3       	ldi	r26, 0x3B	; 59
     338:	b0 e0       	ldi	r27, 0x00	; 0
     33a:	eb e3       	ldi	r30, 0x3B	; 59
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	80 81       	ld	r24, Z
     340:	48 2f       	mov	r20, r24
     342:	8a 81       	ldd	r24, Y+2	; 0x02
     344:	28 2f       	mov	r18, r24
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	02 2e       	mov	r0, r18
     34e:	02 c0       	rjmp	.+4      	; 0x354 <GPIO_writePin+0xb4>
     350:	88 0f       	add	r24, r24
     352:	99 1f       	adc	r25, r25
     354:	0a 94       	dec	r0
     356:	e2 f7       	brpl	.-8      	; 0x350 <GPIO_writePin+0xb0>
     358:	80 95       	com	r24
     35a:	84 23       	and	r24, r20
     35c:	8c 93       	st	X, r24
     35e:	83 c0       	rjmp	.+262    	; 0x466 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     360:	8b 81       	ldd	r24, Y+3	; 0x03
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	a1 f4       	brne	.+40     	; 0x38e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     366:	a8 e3       	ldi	r26, 0x38	; 56
     368:	b0 e0       	ldi	r27, 0x00	; 0
     36a:	e8 e3       	ldi	r30, 0x38	; 56
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	48 2f       	mov	r20, r24
     372:	8a 81       	ldd	r24, Y+2	; 0x02
     374:	28 2f       	mov	r18, r24
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	02 2e       	mov	r0, r18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <GPIO_writePin+0xe4>
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	0a 94       	dec	r0
     386:	e2 f7       	brpl	.-8      	; 0x380 <GPIO_writePin+0xe0>
     388:	84 2b       	or	r24, r20
     38a:	8c 93       	st	X, r24
     38c:	6c c0       	rjmp	.+216    	; 0x466 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     38e:	a8 e3       	ldi	r26, 0x38	; 56
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	e8 e3       	ldi	r30, 0x38	; 56
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	48 2f       	mov	r20, r24
     39a:	8a 81       	ldd	r24, Y+2	; 0x02
     39c:	28 2f       	mov	r18, r24
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	02 2e       	mov	r0, r18
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <GPIO_writePin+0x10c>
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	0a 94       	dec	r0
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <GPIO_writePin+0x108>
     3b0:	80 95       	com	r24
     3b2:	84 23       	and	r24, r20
     3b4:	8c 93       	st	X, r24
     3b6:	57 c0       	rjmp	.+174    	; 0x466 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     3b8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	a1 f4       	brne	.+40     	; 0x3e6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     3be:	a5 e3       	ldi	r26, 0x35	; 53
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e5 e3       	ldi	r30, 0x35	; 53
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	48 2f       	mov	r20, r24
     3ca:	8a 81       	ldd	r24, Y+2	; 0x02
     3cc:	28 2f       	mov	r18, r24
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	02 2e       	mov	r0, r18
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <GPIO_writePin+0x13c>
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	0a 94       	dec	r0
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <GPIO_writePin+0x138>
     3e0:	84 2b       	or	r24, r20
     3e2:	8c 93       	st	X, r24
     3e4:	40 c0       	rjmp	.+128    	; 0x466 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     3e6:	a5 e3       	ldi	r26, 0x35	; 53
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e5 e3       	ldi	r30, 0x35	; 53
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	48 2f       	mov	r20, r24
     3f2:	8a 81       	ldd	r24, Y+2	; 0x02
     3f4:	28 2f       	mov	r18, r24
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	02 2e       	mov	r0, r18
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <GPIO_writePin+0x164>
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	0a 94       	dec	r0
     406:	e2 f7       	brpl	.-8      	; 0x400 <GPIO_writePin+0x160>
     408:	80 95       	com	r24
     40a:	84 23       	and	r24, r20
     40c:	8c 93       	st	X, r24
     40e:	2b c0       	rjmp	.+86     	; 0x466 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     410:	8b 81       	ldd	r24, Y+3	; 0x03
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	a1 f4       	brne	.+40     	; 0x43e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     416:	a2 e3       	ldi	r26, 0x32	; 50
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	e2 e3       	ldi	r30, 0x32	; 50
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	48 2f       	mov	r20, r24
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	28 2f       	mov	r18, r24
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	02 2e       	mov	r0, r18
     42e:	02 c0       	rjmp	.+4      	; 0x434 <GPIO_writePin+0x194>
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	0a 94       	dec	r0
     436:	e2 f7       	brpl	.-8      	; 0x430 <GPIO_writePin+0x190>
     438:	84 2b       	or	r24, r20
     43a:	8c 93       	st	X, r24
     43c:	14 c0       	rjmp	.+40     	; 0x466 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     43e:	a2 e3       	ldi	r26, 0x32	; 50
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e2 e3       	ldi	r30, 0x32	; 50
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	48 2f       	mov	r20, r24
     44a:	8a 81       	ldd	r24, Y+2	; 0x02
     44c:	28 2f       	mov	r18, r24
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 2e       	mov	r0, r18
     456:	02 c0       	rjmp	.+4      	; 0x45c <GPIO_writePin+0x1bc>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	0a 94       	dec	r0
     45e:	e2 f7       	brpl	.-8      	; 0x458 <GPIO_writePin+0x1b8>
     460:	80 95       	com	r24
     462:	84 23       	and	r24, r20
     464:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	cf 91       	pop	r28
     472:	df 91       	pop	r29
     474:	08 95       	ret

00000476 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     476:	df 93       	push	r29
     478:	cf 93       	push	r28
     47a:	00 d0       	rcall	.+0      	; 0x47c <GPIO_readPin+0x6>
     47c:	00 d0       	rcall	.+0      	; 0x47e <GPIO_readPin+0x8>
     47e:	0f 92       	push	r0
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	8a 83       	std	Y+2, r24	; 0x02
     486:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     488:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     48a:	8b 81       	ldd	r24, Y+3	; 0x03
     48c:	88 30       	cpi	r24, 0x08	; 8
     48e:	08 f0       	brcs	.+2      	; 0x492 <GPIO_readPin+0x1c>
     490:	84 c0       	rjmp	.+264    	; 0x59a <GPIO_readPin+0x124>
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	84 30       	cpi	r24, 0x04	; 4
     496:	08 f0       	brcs	.+2      	; 0x49a <GPIO_readPin+0x24>
     498:	80 c0       	rjmp	.+256    	; 0x59a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     49a:	8a 81       	ldd	r24, Y+2	; 0x02
     49c:	28 2f       	mov	r18, r24
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	3d 83       	std	Y+5, r19	; 0x05
     4a2:	2c 83       	std	Y+4, r18	; 0x04
     4a4:	4c 81       	ldd	r20, Y+4	; 0x04
     4a6:	5d 81       	ldd	r21, Y+5	; 0x05
     4a8:	41 30       	cpi	r20, 0x01	; 1
     4aa:	51 05       	cpc	r21, r1
     4ac:	79 f1       	breq	.+94     	; 0x50c <GPIO_readPin+0x96>
     4ae:	8c 81       	ldd	r24, Y+4	; 0x04
     4b0:	9d 81       	ldd	r25, Y+5	; 0x05
     4b2:	82 30       	cpi	r24, 0x02	; 2
     4b4:	91 05       	cpc	r25, r1
     4b6:	34 f4       	brge	.+12     	; 0x4c4 <GPIO_readPin+0x4e>
     4b8:	2c 81       	ldd	r18, Y+4	; 0x04
     4ba:	3d 81       	ldd	r19, Y+5	; 0x05
     4bc:	21 15       	cp	r18, r1
     4be:	31 05       	cpc	r19, r1
     4c0:	69 f0       	breq	.+26     	; 0x4dc <GPIO_readPin+0x66>
     4c2:	6b c0       	rjmp	.+214    	; 0x59a <GPIO_readPin+0x124>
     4c4:	4c 81       	ldd	r20, Y+4	; 0x04
     4c6:	5d 81       	ldd	r21, Y+5	; 0x05
     4c8:	42 30       	cpi	r20, 0x02	; 2
     4ca:	51 05       	cpc	r21, r1
     4cc:	b9 f1       	breq	.+110    	; 0x53c <GPIO_readPin+0xc6>
     4ce:	8c 81       	ldd	r24, Y+4	; 0x04
     4d0:	9d 81       	ldd	r25, Y+5	; 0x05
     4d2:	83 30       	cpi	r24, 0x03	; 3
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f4       	brne	.+2      	; 0x4da <GPIO_readPin+0x64>
     4d8:	49 c0       	rjmp	.+146    	; 0x56c <GPIO_readPin+0xf6>
     4da:	5f c0       	rjmp	.+190    	; 0x59a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     4dc:	e9 e3       	ldi	r30, 0x39	; 57
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	80 81       	ld	r24, Z
     4e2:	28 2f       	mov	r18, r24
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	8b 81       	ldd	r24, Y+3	; 0x03
     4e8:	88 2f       	mov	r24, r24
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	a9 01       	movw	r20, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <GPIO_readPin+0x7e>
     4f0:	55 95       	asr	r21
     4f2:	47 95       	ror	r20
     4f4:	8a 95       	dec	r24
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <GPIO_readPin+0x7a>
     4f8:	ca 01       	movw	r24, r20
     4fa:	81 70       	andi	r24, 0x01	; 1
     4fc:	90 70       	andi	r25, 0x00	; 0
     4fe:	88 23       	and	r24, r24
     500:	19 f0       	breq	.+6      	; 0x508 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	49 c0       	rjmp	.+146    	; 0x59a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     508:	19 82       	std	Y+1, r1	; 0x01
     50a:	47 c0       	rjmp	.+142    	; 0x59a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     50c:	e6 e3       	ldi	r30, 0x36	; 54
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	28 2f       	mov	r18, r24
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	88 2f       	mov	r24, r24
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a9 01       	movw	r20, r18
     51e:	02 c0       	rjmp	.+4      	; 0x524 <GPIO_readPin+0xae>
     520:	55 95       	asr	r21
     522:	47 95       	ror	r20
     524:	8a 95       	dec	r24
     526:	e2 f7       	brpl	.-8      	; 0x520 <GPIO_readPin+0xaa>
     528:	ca 01       	movw	r24, r20
     52a:	81 70       	andi	r24, 0x01	; 1
     52c:	90 70       	andi	r25, 0x00	; 0
     52e:	88 23       	and	r24, r24
     530:	19 f0       	breq	.+6      	; 0x538 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	89 83       	std	Y+1, r24	; 0x01
     536:	31 c0       	rjmp	.+98     	; 0x59a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     538:	19 82       	std	Y+1, r1	; 0x01
     53a:	2f c0       	rjmp	.+94     	; 0x59a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     53c:	e3 e3       	ldi	r30, 0x33	; 51
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a9 01       	movw	r20, r18
     54e:	02 c0       	rjmp	.+4      	; 0x554 <GPIO_readPin+0xde>
     550:	55 95       	asr	r21
     552:	47 95       	ror	r20
     554:	8a 95       	dec	r24
     556:	e2 f7       	brpl	.-8      	; 0x550 <GPIO_readPin+0xda>
     558:	ca 01       	movw	r24, r20
     55a:	81 70       	andi	r24, 0x01	; 1
     55c:	90 70       	andi	r25, 0x00	; 0
     55e:	88 23       	and	r24, r24
     560:	19 f0       	breq	.+6      	; 0x568 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	19 c0       	rjmp	.+50     	; 0x59a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     568:	19 82       	std	Y+1, r1	; 0x01
     56a:	17 c0       	rjmp	.+46     	; 0x59a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     56c:	e0 e3       	ldi	r30, 0x30	; 48
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	80 81       	ld	r24, Z
     572:	28 2f       	mov	r18, r24
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	88 2f       	mov	r24, r24
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	a9 01       	movw	r20, r18
     57e:	02 c0       	rjmp	.+4      	; 0x584 <GPIO_readPin+0x10e>
     580:	55 95       	asr	r21
     582:	47 95       	ror	r20
     584:	8a 95       	dec	r24
     586:	e2 f7       	brpl	.-8      	; 0x580 <GPIO_readPin+0x10a>
     588:	ca 01       	movw	r24, r20
     58a:	81 70       	andi	r24, 0x01	; 1
     58c:	90 70       	andi	r25, 0x00	; 0
     58e:	88 23       	and	r24, r24
     590:	19 f0       	breq	.+6      	; 0x598 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	89 83       	std	Y+1, r24	; 0x01
     596:	01 c0       	rjmp	.+2      	; 0x59a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     598:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     59a:	89 81       	ldd	r24, Y+1	; 0x01
}
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	cf 91       	pop	r28
     5a8:	df 91       	pop	r29
     5aa:	08 95       	ret

000005ac <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     5ac:	df 93       	push	r29
     5ae:	cf 93       	push	r28
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <GPIO_setupPortDirection+0x6>
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <GPIO_setupPortDirection+0x8>
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	89 83       	std	Y+1, r24	; 0x01
     5ba:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	84 30       	cpi	r24, 0x04	; 4
     5c0:	90 f5       	brcc	.+100    	; 0x626 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	28 2f       	mov	r18, r24
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	3c 83       	std	Y+4, r19	; 0x04
     5ca:	2b 83       	std	Y+3, r18	; 0x03
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	91 05       	cpc	r25, r1
     5d4:	d1 f0       	breq	.+52     	; 0x60a <GPIO_setupPortDirection+0x5e>
     5d6:	2b 81       	ldd	r18, Y+3	; 0x03
     5d8:	3c 81       	ldd	r19, Y+4	; 0x04
     5da:	22 30       	cpi	r18, 0x02	; 2
     5dc:	31 05       	cpc	r19, r1
     5de:	2c f4       	brge	.+10     	; 0x5ea <GPIO_setupPortDirection+0x3e>
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	61 f0       	breq	.+24     	; 0x600 <GPIO_setupPortDirection+0x54>
     5e8:	1e c0       	rjmp	.+60     	; 0x626 <GPIO_setupPortDirection+0x7a>
     5ea:	2b 81       	ldd	r18, Y+3	; 0x03
     5ec:	3c 81       	ldd	r19, Y+4	; 0x04
     5ee:	22 30       	cpi	r18, 0x02	; 2
     5f0:	31 05       	cpc	r19, r1
     5f2:	81 f0       	breq	.+32     	; 0x614 <GPIO_setupPortDirection+0x68>
     5f4:	8b 81       	ldd	r24, Y+3	; 0x03
     5f6:	9c 81       	ldd	r25, Y+4	; 0x04
     5f8:	83 30       	cpi	r24, 0x03	; 3
     5fa:	91 05       	cpc	r25, r1
     5fc:	81 f0       	breq	.+32     	; 0x61e <GPIO_setupPortDirection+0x72>
     5fe:	13 c0       	rjmp	.+38     	; 0x626 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     600:	ea e3       	ldi	r30, 0x3A	; 58
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	8a 81       	ldd	r24, Y+2	; 0x02
     606:	80 83       	st	Z, r24
     608:	0e c0       	rjmp	.+28     	; 0x626 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     60a:	e7 e3       	ldi	r30, 0x37	; 55
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	8a 81       	ldd	r24, Y+2	; 0x02
     610:	80 83       	st	Z, r24
     612:	09 c0       	rjmp	.+18     	; 0x626 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     614:	e4 e3       	ldi	r30, 0x34	; 52
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	80 83       	st	Z, r24
     61c:	04 c0       	rjmp	.+8      	; 0x626 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     61e:	e1 e3       	ldi	r30, 0x31	; 49
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	80 83       	st	Z, r24
			break;
		}
	}
}
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	cf 91       	pop	r28
     630:	df 91       	pop	r29
     632:	08 95       	ret

00000634 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	00 d0       	rcall	.+0      	; 0x63a <GPIO_writePort+0x6>
     63a:	00 d0       	rcall	.+0      	; 0x63c <GPIO_writePort+0x8>
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	89 83       	std	Y+1, r24	; 0x01
     642:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	84 30       	cpi	r24, 0x04	; 4
     648:	90 f5       	brcc	.+100    	; 0x6ae <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	28 2f       	mov	r18, r24
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	3c 83       	std	Y+4, r19	; 0x04
     652:	2b 83       	std	Y+3, r18	; 0x03
     654:	8b 81       	ldd	r24, Y+3	; 0x03
     656:	9c 81       	ldd	r25, Y+4	; 0x04
     658:	81 30       	cpi	r24, 0x01	; 1
     65a:	91 05       	cpc	r25, r1
     65c:	d1 f0       	breq	.+52     	; 0x692 <GPIO_writePort+0x5e>
     65e:	2b 81       	ldd	r18, Y+3	; 0x03
     660:	3c 81       	ldd	r19, Y+4	; 0x04
     662:	22 30       	cpi	r18, 0x02	; 2
     664:	31 05       	cpc	r19, r1
     666:	2c f4       	brge	.+10     	; 0x672 <GPIO_writePort+0x3e>
     668:	8b 81       	ldd	r24, Y+3	; 0x03
     66a:	9c 81       	ldd	r25, Y+4	; 0x04
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	61 f0       	breq	.+24     	; 0x688 <GPIO_writePort+0x54>
     670:	1e c0       	rjmp	.+60     	; 0x6ae <GPIO_writePort+0x7a>
     672:	2b 81       	ldd	r18, Y+3	; 0x03
     674:	3c 81       	ldd	r19, Y+4	; 0x04
     676:	22 30       	cpi	r18, 0x02	; 2
     678:	31 05       	cpc	r19, r1
     67a:	81 f0       	breq	.+32     	; 0x69c <GPIO_writePort+0x68>
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	9c 81       	ldd	r25, Y+4	; 0x04
     680:	83 30       	cpi	r24, 0x03	; 3
     682:	91 05       	cpc	r25, r1
     684:	81 f0       	breq	.+32     	; 0x6a6 <GPIO_writePort+0x72>
     686:	13 c0       	rjmp	.+38     	; 0x6ae <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
     688:	eb e3       	ldi	r30, 0x3B	; 59
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	8a 81       	ldd	r24, Y+2	; 0x02
     68e:	80 83       	st	Z, r24
     690:	0e c0       	rjmp	.+28     	; 0x6ae <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
     692:	e8 e3       	ldi	r30, 0x38	; 56
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	8a 81       	ldd	r24, Y+2	; 0x02
     698:	80 83       	st	Z, r24
     69a:	09 c0       	rjmp	.+18     	; 0x6ae <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
     69c:	e5 e3       	ldi	r30, 0x35	; 53
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	8a 81       	ldd	r24, Y+2	; 0x02
     6a2:	80 83       	st	Z, r24
     6a4:	04 c0       	rjmp	.+8      	; 0x6ae <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
     6a6:	e2 e3       	ldi	r30, 0x32	; 50
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	80 83       	st	Z, r24
			break;
		}
	}
}
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	cf 91       	pop	r28
     6b8:	df 91       	pop	r29
     6ba:	08 95       	ret

000006bc <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <GPIO_readPort+0x6>
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <GPIO_readPort+0x8>
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     6ca:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     6cc:	8a 81       	ldd	r24, Y+2	; 0x02
     6ce:	84 30       	cpi	r24, 0x04	; 4
     6d0:	90 f5       	brcc	.+100    	; 0x736 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	28 2f       	mov	r18, r24
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	3c 83       	std	Y+4, r19	; 0x04
     6da:	2b 83       	std	Y+3, r18	; 0x03
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	9c 81       	ldd	r25, Y+4	; 0x04
     6e0:	81 30       	cpi	r24, 0x01	; 1
     6e2:	91 05       	cpc	r25, r1
     6e4:	d1 f0       	breq	.+52     	; 0x71a <GPIO_readPort+0x5e>
     6e6:	2b 81       	ldd	r18, Y+3	; 0x03
     6e8:	3c 81       	ldd	r19, Y+4	; 0x04
     6ea:	22 30       	cpi	r18, 0x02	; 2
     6ec:	31 05       	cpc	r19, r1
     6ee:	2c f4       	brge	.+10     	; 0x6fa <GPIO_readPort+0x3e>
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	61 f0       	breq	.+24     	; 0x710 <GPIO_readPort+0x54>
     6f8:	1e c0       	rjmp	.+60     	; 0x736 <GPIO_readPort+0x7a>
     6fa:	2b 81       	ldd	r18, Y+3	; 0x03
     6fc:	3c 81       	ldd	r19, Y+4	; 0x04
     6fe:	22 30       	cpi	r18, 0x02	; 2
     700:	31 05       	cpc	r19, r1
     702:	81 f0       	breq	.+32     	; 0x724 <GPIO_readPort+0x68>
     704:	8b 81       	ldd	r24, Y+3	; 0x03
     706:	9c 81       	ldd	r25, Y+4	; 0x04
     708:	83 30       	cpi	r24, 0x03	; 3
     70a:	91 05       	cpc	r25, r1
     70c:	81 f0       	breq	.+32     	; 0x72e <GPIO_readPort+0x72>
     70e:	13 c0       	rjmp	.+38     	; 0x736 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
     710:	e9 e3       	ldi	r30, 0x39	; 57
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	89 83       	std	Y+1, r24	; 0x01
     718:	0e c0       	rjmp	.+28     	; 0x736 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
     71a:	e6 e3       	ldi	r30, 0x36	; 54
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	89 83       	std	Y+1, r24	; 0x01
     722:	09 c0       	rjmp	.+18     	; 0x736 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
     724:	e3 e3       	ldi	r30, 0x33	; 51
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	89 83       	std	Y+1, r24	; 0x01
     72c:	04 c0       	rjmp	.+8      	; 0x736 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
     72e:	e0 e3       	ldi	r30, 0x30	; 48
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	80 81       	ld	r24, Z
     734:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
     736:	89 81       	ldd	r24, Y+1	; 0x01
}
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	cf 91       	pop	r28
     742:	df 91       	pop	r29
     744:	08 95       	ret

00000746 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	4f 93       	push	r20
     756:	5f 93       	push	r21
     758:	6f 93       	push	r22
     75a:	7f 93       	push	r23
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	af 93       	push	r26
     762:	bf 93       	push	r27
     764:	ef 93       	push	r30
     766:	ff 93       	push	r31
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     770:	80 91 6e 00 	lds	r24, 0x006E
     774:	90 91 6f 00 	lds	r25, 0x006F
     778:	00 97       	sbiw	r24, 0x00	; 0
     77a:	29 f0       	breq	.+10     	; 0x786 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     77c:	e0 91 6e 00 	lds	r30, 0x006E
     780:	f0 91 6f 00 	lds	r31, 0x006F
     784:	09 95       	icall
	}
}
     786:	cf 91       	pop	r28
     788:	df 91       	pop	r29
     78a:	ff 91       	pop	r31
     78c:	ef 91       	pop	r30
     78e:	bf 91       	pop	r27
     790:	af 91       	pop	r26
     792:	9f 91       	pop	r25
     794:	8f 91       	pop	r24
     796:	7f 91       	pop	r23
     798:	6f 91       	pop	r22
     79a:	5f 91       	pop	r21
     79c:	4f 91       	pop	r20
     79e:	3f 91       	pop	r19
     7a0:	2f 91       	pop	r18
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	2f 93       	push	r18
     7b8:	3f 93       	push	r19
     7ba:	4f 93       	push	r20
     7bc:	5f 93       	push	r21
     7be:	6f 93       	push	r22
     7c0:	7f 93       	push	r23
     7c2:	8f 93       	push	r24
     7c4:	9f 93       	push	r25
     7c6:	af 93       	push	r26
     7c8:	bf 93       	push	r27
     7ca:	ef 93       	push	r30
     7cc:	ff 93       	push	r31
     7ce:	df 93       	push	r29
     7d0:	cf 93       	push	r28
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     7d6:	80 91 6e 00 	lds	r24, 0x006E
     7da:	90 91 6f 00 	lds	r25, 0x006F
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	29 f0       	breq	.+10     	; 0x7ec <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     7e2:	e0 91 6e 00 	lds	r30, 0x006E
     7e6:	f0 91 6f 00 	lds	r31, 0x006F
     7ea:	09 95       	icall
	}
}
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0
     80e:	1f 90       	pop	r1
     810:	18 95       	reti

00000812 <Timer1_init>:
 * Description : Function to initialize the Timer1 driver
 * 	 Initialize Timer1 Registers
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     812:	df 93       	push	r29
     814:	cf 93       	push	r28
     816:	00 d0       	rcall	.+0      	; 0x818 <Timer1_init+0x6>
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr -> initial_value;   // Set Timer0 initial value
     820:	ac e4       	ldi	r26, 0x4C	; 76
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	e9 81       	ldd	r30, Y+1	; 0x01
     826:	fa 81       	ldd	r31, Y+2	; 0x02
     828:	80 81       	ld	r24, Z
     82a:	91 81       	ldd	r25, Z+1	; 0x01
     82c:	11 96       	adiw	r26, 0x01	; 1
     82e:	9c 93       	st	X, r25
     830:	8e 93       	st	-X, r24

	/* Configure the timer control register
	 * Non PWM mode FOC1A =1 , FOC1B =1 (always)
	 * of TCCR1A Register
	 */
	TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
     832:	af e4       	ldi	r26, 0x4F	; 79
     834:	b0 e0       	ldi	r27, 0x00	; 0
     836:	ef e4       	ldi	r30, 0x4F	; 79
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	8c 60       	ori	r24, 0x0C	; 12
     83e:	8c 93       	st	X, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
     840:	ae e4       	ldi	r26, 0x4E	; 78
     842:	b0 e0       	ldi	r27, 0x00	; 0
     844:	ee e4       	ldi	r30, 0x4E	; 78
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	98 2f       	mov	r25, r24
     84c:	98 7f       	andi	r25, 0xF8	; 248
     84e:	e9 81       	ldd	r30, Y+1	; 0x01
     850:	fa 81       	ldd	r31, Y+2	; 0x02
     852:	84 81       	ldd	r24, Z+4	; 0x04
     854:	89 2b       	or	r24, r25
     856:	8c 93       	st	X, r24

	if(Config_Ptr -> mode == NORMAL_Mode)
     858:	e9 81       	ldd	r30, Y+1	; 0x01
     85a:	fa 81       	ldd	r31, Y+2	; 0x02
     85c:	85 81       	ldd	r24, Z+5	; 0x05
     85e:	88 23       	and	r24, r24
     860:	29 f4       	brne	.+10     	; 0x86c <__stack+0xd>
	{
		/* 2. Normal Mode WGM10=0 & WGM11=0 & WGM12=0 & WGM13=0
		 * 3. Normal Mode COM1A0/COM1B0=0 & COM1A1/COM1B1=0
		 * TCCR0 register equal zero by default
		 */
		TIMSK = (1<< TOIE1); // Enable Timer1 Overflow Interrupt
     862:	e9 e5       	ldi	r30, 0x59	; 89
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	84 e0       	ldi	r24, 0x04	; 4
     868:	80 83       	st	Z, r24
     86a:	1c c0       	rjmp	.+56     	; 0x8a4 <__stack+0x45>
	}
	else if(Config_Ptr -> mode == CTC_Mode)
     86c:	e9 81       	ldd	r30, Y+1	; 0x01
     86e:	fa 81       	ldd	r31, Y+2	; 0x02
     870:	85 81       	ldd	r24, Z+5	; 0x05
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	b9 f4       	brne	.+46     	; 0x8a4 <__stack+0x45>
	{
		/*CTC Mode WGM10=0 & WGM11=0 & WGM12=1 &  WGM13=0*/
		TCCR1B |= (1<< WGM12);
     876:	ae e4       	ldi	r26, 0x4E	; 78
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	ee e4       	ldi	r30, 0x4E	; 78
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	88 60       	ori	r24, 0x08	; 8
     882:	8c 93       	st	X, r24

		TIMSK |= (1<<OCIE1A); // Enable Timer1 Compare Interrupt
     884:	a9 e5       	ldi	r26, 0x59	; 89
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e9 e5       	ldi	r30, 0x59	; 89
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	80 61       	ori	r24, 0x10	; 16
     890:	8c 93       	st	X, r24

		OCR1A = Config_Ptr -> compare_value; // Set Compare Value
     892:	aa e4       	ldi	r26, 0x4A	; 74
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	e9 81       	ldd	r30, Y+1	; 0x01
     898:	fa 81       	ldd	r31, Y+2	; 0x02
     89a:	82 81       	ldd	r24, Z+2	; 0x02
     89c:	93 81       	ldd	r25, Z+3	; 0x03
     89e:	11 96       	adiw	r26, 0x01	; 1
     8a0:	9c 93       	st	X, r25
     8a2:	8e 93       	st	-X, r24
	}
}
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	cf 91       	pop	r28
     8aa:	df 91       	pop	r29
     8ac:	08 95       	ret

000008ae <Timer1_deInit>:

/*
 * Description: Function to disable the Timer0 to stop the Driver
 */
void Timer1_deInit(void)
{
     8ae:	df 93       	push	r29
     8b0:	cf 93       	push	r28
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
     8b6:	ef e4       	ldi	r30, 0x4F	; 79
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	10 82       	st	Z, r1
	TCCR1B = 0;
     8bc:	ee e4       	ldi	r30, 0x4E	; 78
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	10 82       	st	Z, r1
	TCNT1 = 0;
     8c2:	ec e4       	ldi	r30, 0x4C	; 76
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	11 82       	std	Z+1, r1	; 0x01
     8c8:	10 82       	st	Z, r1
	TIMSK = 0; // Disable Timer1 Interrupt
     8ca:	e9 e5       	ldi	r30, 0x59	; 89
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	10 82       	st	Z, r1
}
     8d0:	cf 91       	pop	r28
     8d2:	df 91       	pop	r29
     8d4:	08 95       	ret

000008d6 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
     8d6:	df 93       	push	r29
     8d8:	cf 93       	push	r28
     8da:	00 d0       	rcall	.+0      	; 0x8dc <Timer1_setCallBack+0x6>
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	9a 83       	std	Y+2, r25	; 0x02
     8e2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	9a 81       	ldd	r25, Y+2	; 0x02
     8e8:	90 93 6f 00 	sts	0x006F, r25
     8ec:	80 93 6e 00 	sts	0x006E, r24
}
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	08 95       	ret

000008fa <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     8fa:	df 93       	push	r29
     8fc:	cf 93       	push	r28
     8fe:	00 d0       	rcall	.+0      	; 0x900 <TWI_init+0x6>
     900:	0f 92       	push	r0
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	9a 83       	std	Y+2, r25	; 0x02
     908:	89 83       	std	Y+1, r24	; 0x01
	/* Select Baud Rate*/
	TWBR = Config_Ptr->bit_rate;
     90a:	a0 e2       	ldi	r26, 0x20	; 32
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	e9 81       	ldd	r30, Y+1	; 0x01
     910:	fa 81       	ldd	r31, Y+2	; 0x02
     912:	81 81       	ldd	r24, Z+1	; 0x01
     914:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
     916:	e6 e5       	ldi	r30, 0x56	; 86
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	84 e0       	ldi	r24, 0x04	; 4
     91c:	80 83       	st	Z, r24

	/**********************************************
	 * 1.Prescaler used in equation of baud rate = 0
	 * 2.Status bits = 0 , because ,they are read only
	 **********************************************/
	TWSR = 0x00;
     91e:	e1 e2       	ldi	r30, 0x21	; 33
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	10 82       	st	Z, r1
	
	/**********************************************************************************
	 * 1.Select address , Note 7-bit address in the seven most significant bits of TWAR
	 * 2.Disable recognition of the general call address
	 **********************************************************************************/
	TWAR = (TWAR & 0x00) | (Config_Ptr->address << 1);
     924:	e2 e2       	ldi	r30, 0x22	; 34
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	a2 e2       	ldi	r26, 0x22	; 34
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	e9 81       	ldd	r30, Y+1	; 0x01
     930:	fa 81       	ldd	r31, Y+2	; 0x02
     932:	80 81       	ld	r24, Z
     934:	88 2f       	mov	r24, r24
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	8c 93       	st	X, r24


}
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	cf 91       	pop	r28
     946:	df 91       	pop	r29
     948:	08 95       	ret

0000094a <TWI_start>:

void TWI_start(void)
{
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     952:	e6 e5       	ldi	r30, 0x56	; 86
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	84 ea       	ldi	r24, 0xA4	; 164
     958:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
     95a:	e6 e5       	ldi	r30, 0x56	; 86
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	88 23       	and	r24, r24
     962:	dc f7       	brge	.-10     	; 0x95a <TWI_start+0x10>
}
     964:	cf 91       	pop	r28
     966:	df 91       	pop	r29
     968:	08 95       	ret

0000096a <TWI_stop>:

void TWI_stop(void)
{
     96a:	df 93       	push	r29
     96c:	cf 93       	push	r28
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     972:	e6 e5       	ldi	r30, 0x56	; 86
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	84 e9       	ldi	r24, 0x94	; 148
     978:	80 83       	st	Z, r24
}
     97a:	cf 91       	pop	r28
     97c:	df 91       	pop	r29
     97e:	08 95       	ret

00000980 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
     980:	df 93       	push	r29
     982:	cf 93       	push	r28
     984:	0f 92       	push	r0
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
     98c:	e3 e2       	ldi	r30, 0x23	; 35
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
     994:	e6 e5       	ldi	r30, 0x56	; 86
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	84 e8       	ldi	r24, 0x84	; 132
     99a:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
     99c:	e6 e5       	ldi	r30, 0x56	; 86
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	88 23       	and	r24, r24
     9a4:	dc f7       	brge	.-10     	; 0x99c <TWI_writeByte+0x1c>
}
     9a6:	0f 90       	pop	r0
     9a8:	cf 91       	pop	r28
     9aa:	df 91       	pop	r29
     9ac:	08 95       	ret

000009ae <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     9b6:	e6 e5       	ldi	r30, 0x56	; 86
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	84 ec       	ldi	r24, 0xC4	; 196
     9bc:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
     9be:	e6 e5       	ldi	r30, 0x56	; 86
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	88 23       	and	r24, r24
     9c6:	dc f7       	brge	.-10     	; 0x9be <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
     9c8:	e3 e2       	ldi	r30, 0x23	; 35
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
}
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	08 95       	ret

000009d4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
     9d4:	df 93       	push	r29
     9d6:	cf 93       	push	r28
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
     9dc:	e6 e5       	ldi	r30, 0x56	; 86
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	84 e8       	ldi	r24, 0x84	; 132
     9e2:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
     9e4:	e6 e5       	ldi	r30, 0x56	; 86
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	88 23       	and	r24, r24
     9ec:	dc f7       	brge	.-10     	; 0x9e4 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
     9ee:	e3 e2       	ldi	r30, 0x23	; 35
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
}
     9f4:	cf 91       	pop	r28
     9f6:	df 91       	pop	r29
     9f8:	08 95       	ret

000009fa <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     9fa:	df 93       	push	r29
     9fc:	cf 93       	push	r28
     9fe:	0f 92       	push	r0
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
     a04:	e1 e2       	ldi	r30, 0x21	; 33
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	88 7f       	andi	r24, 0xF8	; 248
     a0c:	89 83       	std	Y+1, r24	; 0x01
	return status;
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     a10:	0f 90       	pop	r0
     a12:	cf 91       	pop	r28
     a14:	df 91       	pop	r29
     a16:	08 95       	ret

00000a18 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     a18:	df 93       	push	r29
     a1a:	cf 93       	push	r28
     a1c:	00 d0       	rcall	.+0      	; 0xa1e <UART_init+0x6>
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <UART_init+0x8>
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	9c 83       	std	Y+4, r25	; 0x04
     a26:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     a28:	1a 82       	std	Y+2, r1	; 0x02
     a2a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     a2c:	eb e2       	ldi	r30, 0x2B	; 43
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     a34:	ea e2       	ldi	r30, 0x2A	; 42
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	88 e1       	ldi	r24, 0x18	; 24
     a3a:	80 83       	st	Z, r24
	if(Config_Ptr->bit_data == Nine_bits)
     a3c:	eb 81       	ldd	r30, Y+3	; 0x03
     a3e:	fc 81       	ldd	r31, Y+4	; 0x04
     a40:	80 81       	ld	r24, Z
     a42:	87 30       	cpi	r24, 0x07	; 7
     a44:	39 f4       	brne	.+14     	; 0xa54 <UART_init+0x3c>
	{
		SET_BIT(UCSRB,UCSZ2);
     a46:	aa e2       	ldi	r26, 0x2A	; 42
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	ea e2       	ldi	r30, 0x2A	; 42
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	84 60       	ori	r24, 0x04	; 4
     a52:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRC,URSEL);
     a54:	a0 e4       	ldi	r26, 0x40	; 64
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	e0 e4       	ldi	r30, 0x40	; 64
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	80 68       	ori	r24, 0x80	; 128
     a60:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF9) | ((Config_Ptr->bit_data) << UCSZ0);
     a62:	a0 e4       	ldi	r26, 0x40	; 64
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e0 e4       	ldi	r30, 0x40	; 64
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	28 2f       	mov	r18, r24
     a6e:	29 7f       	andi	r18, 0xF9	; 249
     a70:	eb 81       	ldd	r30, Y+3	; 0x03
     a72:	fc 81       	ldd	r31, Y+4	; 0x04
     a74:	80 81       	ld	r24, Z
     a76:	88 2f       	mov	r24, r24
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	82 2b       	or	r24, r18
     a80:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF7) | ((Config_Ptr->stop_bit) << USBS);
     a82:	a0 e4       	ldi	r26, 0x40	; 64
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e0 e4       	ldi	r30, 0x40	; 64
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	28 2f       	mov	r18, r24
     a8e:	27 7f       	andi	r18, 0xF7	; 247
     a90:	eb 81       	ldd	r30, Y+3	; 0x03
     a92:	fc 81       	ldd	r31, Y+4	; 0x04
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	88 2f       	mov	r24, r24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	82 2b       	or	r24, r18
     aa8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XCF) | ((Config_Ptr->parity) << UPM0);
     aaa:	a0 e4       	ldi	r26, 0x40	; 64
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	e0 e4       	ldi	r30, 0x40	; 64
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	28 2f       	mov	r18, r24
     ab6:	2f 7c       	andi	r18, 0xCF	; 207
     ab8:	eb 81       	ldd	r30, Y+3	; 0x03
     aba:	fc 81       	ldd	r31, Y+4	; 0x04
     abc:	81 81       	ldd	r24, Z+1	; 0x01
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	82 95       	swap	r24
     ac4:	92 95       	swap	r25
     ac6:	90 7f       	andi	r25, 0xF0	; 240
     ac8:	98 27       	eor	r25, r24
     aca:	80 7f       	andi	r24, 0xF0	; 240
     acc:	98 27       	eor	r25, r24
     ace:	82 2b       	or	r24, r18
     ad0:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
     ad2:	eb 81       	ldd	r30, Y+3	; 0x03
     ad4:	fc 81       	ldd	r31, Y+4	; 0x04
     ad6:	83 81       	ldd	r24, Z+3	; 0x03
     ad8:	94 81       	ldd	r25, Z+4	; 0x04
     ada:	a5 81       	ldd	r26, Z+5	; 0x05
     adc:	b6 81       	ldd	r27, Z+6	; 0x06
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	aa 1f       	adc	r26, r26
     ae4:	bb 1f       	adc	r27, r27
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	aa 1f       	adc	r26, r26
     aec:	bb 1f       	adc	r27, r27
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	aa 1f       	adc	r26, r26
     af4:	bb 1f       	adc	r27, r27
     af6:	9c 01       	movw	r18, r24
     af8:	ad 01       	movw	r20, r26
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	92 e1       	ldi	r25, 0x12	; 18
     afe:	aa e7       	ldi	r26, 0x7A	; 122
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	bc 01       	movw	r22, r24
     b04:	cd 01       	movw	r24, r26
     b06:	0e 94 14 0a 	call	0x1428	; 0x1428 <__udivmodsi4>
     b0a:	da 01       	movw	r26, r20
     b0c:	c9 01       	movw	r24, r18
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	9a 83       	std	Y+2, r25	; 0x02
     b12:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     b14:	e0 e4       	ldi	r30, 0x40	; 64
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	9a 81       	ldd	r25, Y+2	; 0x02
     b1c:	89 2f       	mov	r24, r25
     b1e:	99 27       	eor	r25, r25
     b20:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     b22:	e9 e2       	ldi	r30, 0x29	; 41
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	80 83       	st	Z, r24


}
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	cf 91       	pop	r28
     b34:	df 91       	pop	r29
     b36:	08 95       	ret

00000b38 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	0f 92       	push	r0
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     b44:	eb e2       	ldi	r30, 0x2B	; 43
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	88 2f       	mov	r24, r24
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	80 72       	andi	r24, 0x20	; 32
     b50:	90 70       	andi	r25, 0x00	; 0
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	b9 f3       	breq	.-18     	; 0xb44 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     b56:	ec e2       	ldi	r30, 0x2C	; 44
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
     b5e:	0f 90       	pop	r0
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     b6e:	eb e2       	ldi	r30, 0x2B	; 43
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 23       	and	r24, r24
     b76:	dc f7       	brge	.-10     	; 0xb6e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
     b78:	ec e2       	ldi	r30, 0x2C	; 44
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
}
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	00 d0       	rcall	.+0      	; 0xb8a <UART_sendString+0x6>
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	9b 83       	std	Y+3, r25	; 0x03
     b92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     b94:	19 82       	std	Y+1, r1	; 0x01
     b96:	0e c0       	rjmp	.+28     	; 0xbb4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	9b 81       	ldd	r25, Y+3	; 0x03
     ba2:	fc 01       	movw	r30, r24
     ba4:	e2 0f       	add	r30, r18
     ba6:	f3 1f       	adc	r31, r19
     ba8:	80 81       	ld	r24, Z
     baa:	0e 94 9c 05 	call	0xb38	; 0xb38 <UART_sendByte>
		i++;
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	8f 5f       	subi	r24, 0xFF	; 255
     bb2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	9b 81       	ldd	r25, Y+3	; 0x03
     bbe:	fc 01       	movw	r30, r24
     bc0:	e2 0f       	add	r30, r18
     bc2:	f3 1f       	adc	r31, r19
     bc4:	80 81       	ld	r24, Z
     bc6:	88 23       	and	r24, r24
     bc8:	39 f7       	brne	.-50     	; 0xb98 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <UART_receiveString+0xa>
     be0:	0f 92       	push	r0
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	9b 83       	std	Y+3, r25	; 0x03
     be8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     bea:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	28 2f       	mov	r18, r24
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	9b 81       	ldd	r25, Y+3	; 0x03
     bf6:	8c 01       	movw	r16, r24
     bf8:	02 0f       	add	r16, r18
     bfa:	13 1f       	adc	r17, r19
     bfc:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_recieveByte>
     c00:	f8 01       	movw	r30, r16
     c02:	80 83       	st	Z, r24
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	8f 5f       	subi	r24, 0xFF	; 255
     c0a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	9b 81       	ldd	r25, Y+3	; 0x03
     c16:	8c 01       	movw	r16, r24
     c18:	02 0f       	add	r16, r18
     c1a:	13 1f       	adc	r17, r19
     c1c:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_recieveByte>
     c20:	f8 01       	movw	r30, r16
     c22:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	9b 81       	ldd	r25, Y+3	; 0x03
     c2e:	fc 01       	movw	r30, r24
     c30:	e2 0f       	add	r30, r18
     c32:	f3 1f       	adc	r31, r19
     c34:	80 81       	ld	r24, Z
     c36:	83 32       	cpi	r24, 0x23	; 35
     c38:	31 f7       	brne	.-52     	; 0xc06 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	9b 81       	ldd	r25, Y+3	; 0x03
     c44:	fc 01       	movw	r30, r24
     c46:	e2 0f       	add	r30, r18
     c48:	f3 1f       	adc	r31, r19
     c4a:	10 82       	st	Z, r1
}
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	08 95       	ret

00000c5c <BUZZER_init>:
/*
 * Function Name: BUZZER_init
 * Description: Setup Buzzer_pin as output pin  and turn off the buzzer
 */
void BUZZER_init(void)
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
	//Setup the direction for the buzzer pin as output pin through the GPIO driver
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN, PIN_OUTPUT);
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	63 e0       	ldi	r22, 0x03	; 3
     c68:	41 e0       	ldi	r20, 0x01	; 1
     c6a:	0e 94 65 00 	call	0xca	; 0xca <GPIO_setupPinDirection>

	//Turn off the buzzer through the GPIO.
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	63 e0       	ldi	r22, 0x03	; 3
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GPIO_writePin>
}
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <BUZZER_on>:
/*
 * Function Name: BUZZER_On()
 * Description :  enable the Buzzer through the GPIO
 */
void BUZZER_on(void)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT , BUZZER_PIN , LOGIC_HIGH);
     c86:	83 e0       	ldi	r24, 0x03	; 3
     c88:	63 e0       	ldi	r22, 0x03	; 3
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GPIO_writePin>
}
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <BUZZER_off>:
/*
 * Function Name: BUZZER_Off()
 * Description:  disable the Buzzer through the GPIO.
 */
void BUZZER_off(void)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	63 e0       	ldi	r22, 0x03	; 3
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GPIO_writePin>
}
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <DcMotor_Init>:
 * setup the direction for the two motor pins
 * Stop at the DC-Motor at the beginning
 */

void DcMotor_Init(void)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
	//setup the direction for the two motor pins
	GPIO_setupPinDirection(PORT_INPUTS, PIN_INPUT_1, PIN_OUTPUT);
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	0e 94 65 00 	call	0xca	; 0xca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_INPUTS, PIN_INPUT_2, PIN_OUTPUT);
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	62 e0       	ldi	r22, 0x02	; 2
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 65 00 	call	0xca	; 0xca <GPIO_setupPinDirection>

	//Stop at the DC-Motor at the beginning
	GPIO_writePin(PORT_INPUTS, PIN_INPUT_1, LOGIC_LOW);
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GPIO_writePin>
	GPIO_writePin(PORT_INPUTS, PIN_INPUT_2, LOGIC_LOW);
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	62 e0       	ldi	r22, 0x02	; 2
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GPIO_writePin>
}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <DcMotor_Rotate>:
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value.
 */

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	00 d0       	rcall	.+0      	; 0xcea <DcMotor_Rotate+0x6>
     cea:	00 d0       	rcall	.+0      	; 0xcec <DcMotor_Rotate+0x8>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	6a 83       	std	Y+2, r22	; 0x02

	switch(state)
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	3c 83       	std	Y+4, r19	; 0x04
     cfc:	2b 83       	std	Y+3, r18	; 0x03
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	91 05       	cpc	r25, r1
     d06:	f9 f0       	breq	.+62     	; 0xd46 <DcMotor_Rotate+0x62>
     d08:	2b 81       	ldd	r18, Y+3	; 0x03
     d0a:	3c 81       	ldd	r19, Y+4	; 0x04
     d0c:	22 30       	cpi	r18, 0x02	; 2
     d0e:	31 05       	cpc	r19, r1
     d10:	79 f0       	breq	.+30     	; 0xd30 <DcMotor_Rotate+0x4c>
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	01 f5       	brne	.+64     	; 0xd5a <DcMotor_Rotate+0x76>
	{
	case STOP_DcMotor:
		/* Stop DC Motor */
		GPIO_writePin(PORT_INPUTS, PIN_INPUT_1, LOGIC_LOW);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GPIO_writePin>
		GPIO_writePin(PORT_INPUTS, PIN_INPUT_2, LOGIC_LOW);
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	62 e0       	ldi	r22, 0x02	; 2
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GPIO_writePin>
     d2e:	15 c0       	rjmp	.+42     	; 0xd5a <DcMotor_Rotate+0x76>
		break;
	case CW_DcMotor:
		/* Clockwise Rotation */
		GPIO_writePin(PORT_INPUTS, PIN_INPUT_1, LOGIC_LOW);
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GPIO_writePin>
		GPIO_writePin(PORT_INPUTS, PIN_INPUT_2, LOGIC_HIGH);
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	62 e0       	ldi	r22, 0x02	; 2
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GPIO_writePin>
     d44:	0a c0       	rjmp	.+20     	; 0xd5a <DcMotor_Rotate+0x76>
		break;
	case A_CW_DcMotor:
		/* Anti Clockwise Rotation */
		GPIO_writePin(PORT_INPUTS, PIN_INPUT_1, LOGIC_HIGH);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	41 e0       	ldi	r20, 0x01	; 1
     d4c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GPIO_writePin>
		GPIO_writePin(PORT_INPUTS, PIN_INPUT_2, LOGIC_LOW);
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	62 e0       	ldi	r22, 0x02	; 2
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	0e 94 50 01 	call	0x2a0	; 0x2a0 <GPIO_writePin>
		break;
	}
	/* Send the required duty cycle to the PWM driver based on the required speed value */
	PWM_Timer0_Start(speed);
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	0e 94 49 00 	call	0x92	; 0x92 <PWM_Timer0_Start>
}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../MCAL/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <EEPROM_writeByte+0x6>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <EEPROM_writeByte+0x8>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     d80:	0e 94 a5 04 	call	0x94a	; 0x94a <TWI_start>
    if (TWI_getStatus() != TWI_START)
     d84:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_getStatus>
     d88:	88 30       	cpi	r24, 0x08	; 8
     d8a:	11 f0       	breq	.+4      	; 0xd90 <EEPROM_writeByte+0x22>
        return ERROR;
     d8c:	1c 82       	std	Y+4, r1	; 0x04
     d8e:	28 c0       	rjmp	.+80     	; 0xde0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	80 70       	andi	r24, 0x00	; 0
     d96:	97 70       	andi	r25, 0x07	; 7
     d98:	88 0f       	add	r24, r24
     d9a:	89 2f       	mov	r24, r25
     d9c:	88 1f       	adc	r24, r24
     d9e:	99 0b       	sbc	r25, r25
     da0:	91 95       	neg	r25
     da2:	80 6a       	ori	r24, 0xA0	; 160
     da4:	0e 94 c0 04 	call	0x980	; 0x980 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     da8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_getStatus>
     dac:	88 31       	cpi	r24, 0x18	; 24
     dae:	11 f0       	breq	.+4      	; 0xdb4 <EEPROM_writeByte+0x46>
        return ERROR; 
     db0:	1c 82       	std	Y+4, r1	; 0x04
     db2:	16 c0       	rjmp	.+44     	; 0xde0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	0e 94 c0 04 	call	0x980	; 0x980 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     dba:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_getStatus>
     dbe:	88 32       	cpi	r24, 0x28	; 40
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <EEPROM_writeByte+0x58>
        return ERROR;
     dc2:	1c 82       	std	Y+4, r1	; 0x04
     dc4:	0d c0       	rjmp	.+26     	; 0xde0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	0e 94 c0 04 	call	0x980	; 0x980 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     dcc:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_getStatus>
     dd0:	88 32       	cpi	r24, 0x28	; 40
     dd2:	11 f0       	breq	.+4      	; 0xdd8 <EEPROM_writeByte+0x6a>
        return ERROR;
     dd4:	1c 82       	std	Y+4, r1	; 0x04
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     dd8:	0e 94 b5 04 	call	0x96a	; 0x96a <TWI_stop>
	
    return SUCCESS;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	8c 83       	std	Y+4, r24	; 0x04
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <EEPROM_readByte+0x6>
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <EEPROM_readByte+0x8>
     df8:	0f 92       	push	r0
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	7c 83       	std	Y+4, r23	; 0x04
     e04:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     e06:	0e 94 a5 04 	call	0x94a	; 0x94a <TWI_start>
    if (TWI_getStatus() != TWI_START)
     e0a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_getStatus>
     e0e:	88 30       	cpi	r24, 0x08	; 8
     e10:	11 f0       	breq	.+4      	; 0xe16 <EEPROM_readByte+0x26>
        return ERROR;
     e12:	1d 82       	std	Y+5, r1	; 0x05
     e14:	44 c0       	rjmp	.+136    	; 0xe9e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	80 70       	andi	r24, 0x00	; 0
     e1c:	97 70       	andi	r25, 0x07	; 7
     e1e:	88 0f       	add	r24, r24
     e20:	89 2f       	mov	r24, r25
     e22:	88 1f       	adc	r24, r24
     e24:	99 0b       	sbc	r25, r25
     e26:	91 95       	neg	r25
     e28:	80 6a       	ori	r24, 0xA0	; 160
     e2a:	0e 94 c0 04 	call	0x980	; 0x980 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     e2e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_getStatus>
     e32:	88 31       	cpi	r24, 0x18	; 24
     e34:	11 f0       	breq	.+4      	; 0xe3a <EEPROM_readByte+0x4a>
        return ERROR;
     e36:	1d 82       	std	Y+5, r1	; 0x05
     e38:	32 c0       	rjmp	.+100    	; 0xe9e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	0e 94 c0 04 	call	0x980	; 0x980 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e40:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_getStatus>
     e44:	88 32       	cpi	r24, 0x28	; 40
     e46:	11 f0       	breq	.+4      	; 0xe4c <EEPROM_readByte+0x5c>
        return ERROR;
     e48:	1d 82       	std	Y+5, r1	; 0x05
     e4a:	29 c0       	rjmp	.+82     	; 0xe9e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     e4c:	0e 94 a5 04 	call	0x94a	; 0x94a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     e50:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_getStatus>
     e54:	80 31       	cpi	r24, 0x10	; 16
     e56:	11 f0       	breq	.+4      	; 0xe5c <EEPROM_readByte+0x6c>
        return ERROR;
     e58:	1d 82       	std	Y+5, r1	; 0x05
     e5a:	21 c0       	rjmp	.+66     	; 0xe9e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	80 70       	andi	r24, 0x00	; 0
     e62:	97 70       	andi	r25, 0x07	; 7
     e64:	88 0f       	add	r24, r24
     e66:	89 2f       	mov	r24, r25
     e68:	88 1f       	adc	r24, r24
     e6a:	99 0b       	sbc	r25, r25
     e6c:	91 95       	neg	r25
     e6e:	81 6a       	ori	r24, 0xA1	; 161
     e70:	0e 94 c0 04 	call	0x980	; 0x980 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     e74:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_getStatus>
     e78:	80 34       	cpi	r24, 0x40	; 64
     e7a:	11 f0       	breq	.+4      	; 0xe80 <EEPROM_readByte+0x90>
        return ERROR;
     e7c:	1d 82       	std	Y+5, r1	; 0x05
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     e80:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TWI_readByteWithNACK>
     e84:	eb 81       	ldd	r30, Y+3	; 0x03
     e86:	fc 81       	ldd	r31, Y+4	; 0x04
     e88:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     e8a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_getStatus>
     e8e:	88 35       	cpi	r24, 0x58	; 88
     e90:	11 f0       	breq	.+4      	; 0xe96 <EEPROM_readByte+0xa6>
        return ERROR;
     e92:	1d 82       	std	Y+5, r1	; 0x05
     e94:	04 c0       	rjmp	.+8      	; 0xe9e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     e96:	0e 94 b5 04 	call	0x96a	; 0x96a <TWI_stop>

    return SUCCESS;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	8d 83       	std	Y+5, r24	; 0x05
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <main>:
/*
 * Function Name : main()
 * Description   :implement Control ECU Code
 */
int main(void)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	6d 97       	sbiw	r28, 0x1d	; 29
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
	/*Enable i-bit to use interrupt in TIMER1*/
	SREG |=(1<<7);
     ec4:	af e5       	ldi	r26, 0x5F	; 95
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ef e5       	ldi	r30, 0x5F	; 95
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	8c 93       	st	X, r24
	 * 1.Even Parity                               *
	 * 2.stop bit --onebit                         *
	 * 3.8 bits Data                               *
	 * 4.Baudrate= 9600                            *
	 ***********************************************/
	UART_ConfigType configurations = { Eight_bits, Even_Parity , One_bit , 9600 };
     ed2:	ce 01       	movw	r24, r28
     ed4:	40 96       	adiw	r24, 0x10	; 16
     ed6:	9a 8f       	std	Y+26, r25	; 0x1a
     ed8:	89 8f       	std	Y+25, r24	; 0x19
     eda:	e0 e6       	ldi	r30, 0x60	; 96
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	fc 8f       	std	Y+28, r31	; 0x1c
     ee0:	eb 8f       	std	Y+27, r30	; 0x1b
     ee2:	f7 e0       	ldi	r31, 0x07	; 7
     ee4:	fd 8f       	std	Y+29, r31	; 0x1d
     ee6:	eb 8d       	ldd	r30, Y+27	; 0x1b
     ee8:	fc 8d       	ldd	r31, Y+28	; 0x1c
     eea:	00 80       	ld	r0, Z
     eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	9c 8f       	std	Y+28, r25	; 0x1c
     ef4:	8b 8f       	std	Y+27, r24	; 0x1b
     ef6:	e9 8d       	ldd	r30, Y+25	; 0x19
     ef8:	fa 8d       	ldd	r31, Y+26	; 0x1a
     efa:	00 82       	st	Z, r0
     efc:	89 8d       	ldd	r24, Y+25	; 0x19
     efe:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	9a 8f       	std	Y+26, r25	; 0x1a
     f04:	89 8f       	std	Y+25, r24	; 0x19
     f06:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f08:	91 50       	subi	r25, 0x01	; 1
     f0a:	9d 8f       	std	Y+29, r25	; 0x1d
     f0c:	ed 8d       	ldd	r30, Y+29	; 0x1d
     f0e:	ee 23       	and	r30, r30
     f10:	51 f7       	brne	.-44     	; 0xee6 <main+0x36>
	UART_init( &configurations);
     f12:	ce 01       	movw	r24, r28
     f14:	40 96       	adiw	r24, 0x10	; 16
     f16:	0e 94 0c 05 	call	0xa18	; 0xa18 <UART_init>
	/*******************************************************
	 *             I2C Configuration                       *
	 * 1.use 400k bit rate -- TWB=2                        *
	 * 2.Choice address number (4)                         *
	 *******************************************************/
	TWI_ConfigType twi_configurations={0x02,0x04};
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	8f 8b       	std	Y+23, r24	; 0x17
     f1e:	84 e0       	ldi	r24, 0x04	; 4
     f20:	88 8f       	std	Y+24, r24	; 0x18
	TWI_init(&twi_configurations);
     f22:	ce 01       	movw	r24, r28
     f24:	47 96       	adiw	r24, 0x17	; 23
     f26:	0e 94 7d 04 	call	0x8fa	; 0x8fa <TWI_init>

	/* DcMotor initialization*/
	DcMotor_Init();
     f2a:	0e 94 57 06 	call	0xcae	; 0xcae <DcMotor_Init>
	/* Buzzer initialization*/
	BUZZER_init();
     f2e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <BUZZER_init>

	/* Send to MC1 that MC2 become Ready  to recieve orders*/
	while(UART_recieveByte() != MC2_READY);
     f32:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_recieveByte>
     f36:	8f 3f       	cpi	r24, 0xFF	; 255
     f38:	e1 f7       	brne	.-8      	; 0xf32 <main+0x82>
	while(1)
	{
		/*Check if Pass and same pass are taken from HMI_ECU*/
		checkOnPass(newpass ,samePass ,userPass);
     f3a:	ce 01       	movw	r24, r28
     f3c:	06 96       	adiw	r24, 0x06	; 6
     f3e:	9e 01       	movw	r18, r28
     f40:	25 5f       	subi	r18, 0xF5	; 245
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	b9 01       	movw	r22, r18
     f46:	9e 01       	movw	r18, r28
     f48:	2f 5f       	subi	r18, 0xFF	; 255
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
     f4c:	a9 01       	movw	r20, r18
     f4e:	0e 94 df 07 	call	0xfbe	; 0xfbe <checkOnPass>
		/*Start runing the system*/
		systemRun(userPass,newpass,samePass);
     f52:	9e 01       	movw	r18, r28
     f54:	2a 5f       	subi	r18, 0xFA	; 250
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	ae 01       	movw	r20, r28
     f5a:	45 5f       	subi	r20, 0xF5	; 245
     f5c:	5f 4f       	sbci	r21, 0xFF	; 255
     f5e:	ce 01       	movw	r24, r28
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	b9 01       	movw	r22, r18
     f64:	0e 94 ab 08 	call	0x1156	; 0x1156 <systemRun>
     f68:	e8 cf       	rjmp	.-48     	; 0xf3a <main+0x8a>

00000f6a <recievePass>:
/************************************************************************
 * Function Name : recievePass()                                        *
 * Description   : recieve password from HMI_ECU and save it in array   *
 ************************************************************************/
void recievePass(uint8 arr[])
{
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <recievePass+0xa>
     f74:	0f 92       	push	r0
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	9b 83       	std	Y+3, r25	; 0x03
     f7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0 ; i< PASS_SIZE ;i++)
     f7e:	19 82       	std	Y+1, r1	; 0x01
     f80:	0f c0       	rjmp	.+30     	; 0xfa0 <recievePass+0x36>
	{
		arr[i]=UART_recieveByte();
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	9b 81       	ldd	r25, Y+3	; 0x03
     f8c:	8c 01       	movw	r16, r24
     f8e:	02 0f       	add	r16, r18
     f90:	13 1f       	adc	r17, r19
     f92:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_recieveByte>
     f96:	f8 01       	movw	r30, r16
     f98:	80 83       	st	Z, r24
 * Description   : recieve password from HMI_ECU and save it in array   *
 ************************************************************************/
void recievePass(uint8 arr[])
{
	uint8 i;
	for(i=0 ; i< PASS_SIZE ;i++)
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	85 30       	cpi	r24, 0x05	; 5
     fa4:	70 f3       	brcs	.-36     	; 0xf82 <recievePass+0x18>
	{
		arr[i]=UART_recieveByte();
	}
	/* recieve pass untill enter*/
	while(UART_recieveByte() != '=');
     fa6:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_recieveByte>
     faa:	8d 33       	cpi	r24, 0x3D	; 61
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <recievePass+0x3c>
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <checkOnPass>:
 * Function Name:checkOnNewPass()                                                                 *
 * Description:                                                                                   *
 * 	Recieve and Check if The two pass are the same or not , if are matched write it in EEPROM     *
 **************************************************************************************************/
void checkOnPass(uint8 arr1 [], uint8 arr2[] ,uint8 arr3[] )
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	29 97       	sbiw	r28, 0x09	; 9
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	9b 83       	std	Y+3, r25	; 0x03
     fd4:	8a 83       	std	Y+2, r24	; 0x02
     fd6:	7d 83       	std	Y+5, r23	; 0x05
     fd8:	6c 83       	std	Y+4, r22	; 0x04
     fda:	5f 83       	std	Y+7, r21	; 0x07
     fdc:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	recievePass(arr1);		/* recieve pass*/
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	9b 81       	ldd	r25, Y+3	; 0x03
     fe2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <recievePass>
	recievePass(arr2);		/* recieve confim pass*/
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	0e 94 b5 07 	call	0xf6a	; 0xf6a <recievePass>

	/* Compare if two pass are matched or not*/
	for(i=0;i<PASS_SIZE;i++)
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	1e c0       	rjmp	.+60     	; 0x102e <checkOnPass+0x70>
	{
		if(arr1[i] == arr2[i])
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	fc 01       	movw	r30, r24
     ffe:	e2 0f       	add	r30, r18
    1000:	f3 1f       	adc	r31, r19
    1002:	40 81       	ld	r20, Z
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	fc 01       	movw	r30, r24
    1010:	e2 0f       	add	r30, r18
    1012:	f3 1f       	adc	r31, r19
    1014:	80 81       	ld	r24, Z
    1016:	48 17       	cp	r20, r24
    1018:	39 f4       	brne	.+14     	; 0x1028 <checkOnPass+0x6a>
		{
			isPassTrue=TRUE;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	80 93 70 00 	sts	0x0070, r24
	uint8 i;
	recievePass(arr1);		/* recieve pass*/
	recievePass(arr2);		/* recieve confim pass*/

	/* Compare if two pass are matched or not*/
	for(i=0;i<PASS_SIZE;i++)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	03 c0       	rjmp	.+6      	; 0x102e <checkOnPass+0x70>
		{
			isPassTrue=TRUE;
		}
		else
		{
			isPassTrue=FALSE;
    1028:	10 92 70 00 	sts	0x0070, r1
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <checkOnPass+0x76>
	uint8 i;
	recievePass(arr1);		/* recieve pass*/
	recievePass(arr2);		/* recieve confim pass*/

	/* Compare if two pass are matched or not*/
	for(i=0;i<PASS_SIZE;i++)
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	85 30       	cpi	r24, 0x05	; 5
    1032:	f8 f2       	brcs	.-66     	; 0xff2 <checkOnPass+0x34>
			break;
		}
	}

	/* Agreement between two ECUs*/
	UART_sendByte(MC2_WILL_SEND_CHECK);
    1034:	80 e2       	ldi	r24, 0x20	; 32
    1036:	0e 94 9c 05 	call	0xb38	; 0xb38 <UART_sendByte>

	/* Send The result for HMI_ECU*/
	switch(isPassTrue)
    103a:	80 91 70 00 	lds	r24, 0x0070
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	39 87       	std	Y+9, r19	; 0x09
    1044:	28 87       	std	Y+8, r18	; 0x08
    1046:	88 85       	ldd	r24, Y+8	; 0x08
    1048:	99 85       	ldd	r25, Y+9	; 0x09
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	01 f1       	breq	.+64     	; 0x108e <checkOnPass+0xd0>
    104e:	28 85       	ldd	r18, Y+8	; 0x08
    1050:	39 85       	ldd	r19, Y+9	; 0x09
    1052:	21 30       	cpi	r18, 0x01	; 1
    1054:	31 05       	cpc	r19, r1
    1056:	39 f5       	brne	.+78     	; 0x10a6 <checkOnPass+0xe8>
	{
	case TRUE:
		UART_sendByte(PASS_IS_TRUE);	/* Send Result*/
    1058:	80 e1       	ldi	r24, 0x10	; 16
    105a:	0e 94 9c 05 	call	0xb38	; 0xb38 <UART_sendByte>
		isPassTrue=FALSE;				/* Clear Flag*/
    105e:	10 92 70 00 	sts	0x0070, r1
		writeEEPROM(arr1);				/* Write pass in EEPROM */
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	9b 81       	ldd	r25, Y+3	; 0x03
    1066:	0e 94 61 09 	call	0x12c2	; 0x12c2 <writeEEPROM>
		systemOperation();				/*Recieve user option */
    106a:	0e 94 56 09 	call	0x12ac	; 0x12ac <systemOperation>

		/* Agreement between two ECUs*/
		while(UART_recieveByte() != MC2_READY_TO_GET_USER_PASS);
    106e:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_recieveByte>
    1072:	8e 3e       	cpi	r24, 0xEE	; 238
    1074:	e1 f7       	brne	.-8      	; 0x106e <checkOnPass+0xb0>
		/* Recieve User Pass*/
		recievePass(arr3);
    1076:	8e 81       	ldd	r24, Y+6	; 0x06
    1078:	9f 81       	ldd	r25, Y+7	; 0x07
    107a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <recievePass>
		/* Check if equal the pass which write in EEPROM*/
		checkOnEEPROMpass(arr3 ,arr1);
    107e:	8e 81       	ldd	r24, Y+6	; 0x06
    1080:	9f 81       	ldd	r25, Y+7	; 0x07
    1082:	2a 81       	ldd	r18, Y+2	; 0x02
    1084:	3b 81       	ldd	r19, Y+3	; 0x03
    1086:	b9 01       	movw	r22, r18
    1088:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <checkOnEEPROMpass>
    108c:	0c c0       	rjmp	.+24     	; 0x10a6 <checkOnPass+0xe8>
		break;

		/* Case False*/
	case FALSE:
		UART_sendByte(PASS_IS_FALSE);	/*Send Result to HMI_ECU*/
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	0e 94 9c 05 	call	0xb38	; 0xb38 <UART_sendByte>
		checkOnPass(arr1,arr2,arr3);	/* Re-call the function to do the same step*/
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	9b 81       	ldd	r25, Y+3	; 0x03
    1098:	2c 81       	ldd	r18, Y+4	; 0x04
    109a:	3d 81       	ldd	r19, Y+5	; 0x05
    109c:	4e 81       	ldd	r20, Y+6	; 0x06
    109e:	5f 81       	ldd	r21, Y+7	; 0x07
    10a0:	b9 01       	movw	r22, r18
    10a2:	0e 94 df 07 	call	0xfbe	; 0xfbe <checkOnPass>
		break;
	}
}
    10a6:	29 96       	adiw	r28, 0x09	; 9
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <checkOnEEPROMpass>:
/******************************************************
 * Function Name : checkOnEEPROMpass()                *
 * Description   : check on password in EEPROM        *
 ******************************************************/
void checkOnEEPROMpass(uint8 array1[] , uint8 array2[])
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <checkOnEEPROMpass+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <checkOnEEPROMpass+0x8>
    10c0:	0f 92       	push	r0
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	9b 83       	std	Y+3, r25	; 0x03
    10c8:	8a 83       	std	Y+2, r24	; 0x02
    10ca:	7d 83       	std	Y+5, r23	; 0x05
    10cc:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	/* First read pass which stored in EEPROM*/
	for(i=0 ; i<PASS_SIZE ;i++)
    10ce:	19 82       	std	Y+1, r1	; 0x01
    10d0:	14 c0       	rjmp	.+40     	; 0x10fa <checkOnEEPROMpass+0x42>
	{
		EEPROM_readByte((0x0C32)+i,array1+i);
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	8e 5c       	subi	r24, 0xCE	; 206
    10da:	93 4f       	sbci	r25, 0xF3	; 243
    10dc:	ac 01       	movw	r20, r24
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	9b 81       	ldd	r25, Y+3	; 0x03
    10e8:	28 0f       	add	r18, r24
    10ea:	39 1f       	adc	r19, r25
    10ec:	ca 01       	movw	r24, r20
    10ee:	b9 01       	movw	r22, r18
    10f0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <EEPROM_readByte>
 ******************************************************/
void checkOnEEPROMpass(uint8 array1[] , uint8 array2[])
{
	uint8 i;
	/* First read pass which stored in EEPROM*/
	for(i=0 ; i<PASS_SIZE ;i++)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	8f 5f       	subi	r24, 0xFF	; 255
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	85 30       	cpi	r24, 0x05	; 5
    10fe:	48 f3       	brcs	.-46     	; 0x10d2 <checkOnEEPROMpass+0x1a>
	{
		EEPROM_readByte((0x0C32)+i,array1+i);
	}
	/* Compare f two pass are the same or not , And Change Flag */
	for(i=0 ;i<PASS_SIZE ;i++)
    1100:	19 82       	std	Y+1, r1	; 0x01
    1102:	1e c0       	rjmp	.+60     	; 0x1140 <checkOnEEPROMpass+0x88>
	{
		if(array1[i]== array2[i])
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	9b 81       	ldd	r25, Y+3	; 0x03
    110e:	fc 01       	movw	r30, r24
    1110:	e2 0f       	add	r30, r18
    1112:	f3 1f       	adc	r31, r19
    1114:	40 81       	ld	r20, Z
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	fc 01       	movw	r30, r24
    1122:	e2 0f       	add	r30, r18
    1124:	f3 1f       	adc	r31, r19
    1126:	80 81       	ld	r24, Z
    1128:	48 17       	cp	r20, r24
    112a:	39 f4       	brne	.+14     	; 0x113a <checkOnEEPROMpass+0x82>
		{
			isUserPassTrue=TRUE;		/* make flag true*/
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	80 93 71 00 	sts	0x0071, r24
	for(i=0 ; i<PASS_SIZE ;i++)
	{
		EEPROM_readByte((0x0C32)+i,array1+i);
	}
	/* Compare f two pass are the same or not , And Change Flag */
	for(i=0 ;i<PASS_SIZE ;i++)
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <checkOnEEPROMpass+0x88>
		{
			isUserPassTrue=TRUE;		/* make flag true*/
		}
		else
		{
			isUserPassTrue=FALSE;		/* Make Flag False*/
    113a:	10 92 71 00 	sts	0x0071, r1
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <checkOnEEPROMpass+0x8e>
	for(i=0 ; i<PASS_SIZE ;i++)
	{
		EEPROM_readByte((0x0C32)+i,array1+i);
	}
	/* Compare f two pass are the same or not , And Change Flag */
	for(i=0 ;i<PASS_SIZE ;i++)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	85 30       	cpi	r24, 0x05	; 5
    1144:	f8 f2       	brcs	.-66     	; 0x1104 <checkOnEEPROMpass+0x4c>
		{
			isUserPassTrue=FALSE;		/* Make Flag False*/
			break;
		}
	}
}
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <systemRun>:
/*************************************************************
 * Function Name: systemRun()                                *
 * Description  : Start running of the system                *
 *************************************************************/
void systemRun(uint8 userpass[] , uint8 newpass[] ,uint8 samepass[])
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	2a 97       	sbiw	r28, 0x0a	; 10
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	7c 83       	std	Y+4, r23	; 0x04
    1170:	6b 83       	std	Y+3, r22	; 0x03
    1172:	5e 83       	std	Y+6, r21	; 0x06
    1174:	4d 83       	std	Y+5, r20	; 0x05
	/* To know if flag is true or false*/
	checkOnEEPROMpass(userpass ,newpass);
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	2b 81       	ldd	r18, Y+3	; 0x03
    117c:	3c 81       	ldd	r19, Y+4	; 0x04
    117e:	b9 01       	movw	r22, r18
    1180:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <checkOnEEPROMpass>
	/* Agreement between two ECUs*/
	while(UART_recieveByte ()!= CHECK_USER_PASS);
    1184:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_recieveByte>
    1188:	85 35       	cpi	r24, 0x55	; 85
    118a:	e1 f7       	brne	.-8      	; 0x1184 <systemRun+0x2e>
	/*Check on Flag of user password*/
	switch(isUserPassTrue)
    118c:	80 91 71 00 	lds	r24, 0x0071
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	3a 87       	std	Y+10, r19	; 0x0a
    1196:	29 87       	std	Y+9, r18	; 0x09
    1198:	89 85       	ldd	r24, Y+9	; 0x09
    119a:	9a 85       	ldd	r25, Y+10	; 0x0a
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	09 f4       	brne	.+2      	; 0x11a2 <systemRun+0x4c>
    11a0:	45 c0       	rjmp	.+138    	; 0x122c <systemRun+0xd6>
    11a2:	29 85       	ldd	r18, Y+9	; 0x09
    11a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    11a6:	21 30       	cpi	r18, 0x01	; 1
    11a8:	31 05       	cpc	r19, r1
    11aa:	09 f0       	breq	.+2      	; 0x11ae <systemRun+0x58>
    11ac:	76 c0       	rjmp	.+236    	; 0x129a <systemRun+0x144>
	{
	case TRUE:

	{
		UART_sendByte(USER_PASS_IS_TRUE);	/* Send to HMI that the user pass is true*/
    11ae:	87 e1       	ldi	r24, 0x17	; 23
    11b0:	0e 94 9c 05 	call	0xb38	; 0xb38 <UART_sendByte>
		failedAttemp=0;						/* Make failed Attemps =0*/
    11b4:	10 92 72 00 	sts	0x0072, r1
		/* Check on User choice*/
		switch(SystemOperation)
    11b8:	80 91 74 00 	lds	r24, 0x0074
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	38 87       	std	Y+8, r19	; 0x08
    11c2:	2f 83       	std	Y+7, r18	; 0x07
    11c4:	8f 81       	ldd	r24, Y+7	; 0x07
    11c6:	98 85       	ldd	r25, Y+8	; 0x08
    11c8:	8b 32       	cpi	r24, 0x2B	; 43
    11ca:	91 05       	cpc	r25, r1
    11cc:	31 f0       	breq	.+12     	; 0x11da <systemRun+0x84>
    11ce:	2f 81       	ldd	r18, Y+7	; 0x07
    11d0:	38 85       	ldd	r19, Y+8	; 0x08
    11d2:	2d 32       	cpi	r18, 0x2D	; 45
    11d4:	31 05       	cpc	r19, r1
    11d6:	b9 f0       	breq	.+46     	; 0x1206 <systemRun+0xb0>
    11d8:	60 c0       	rjmp	.+192    	; 0x129a <systemRun+0x144>
		{
		case '+' :
			openDoor();			/* turn on dcmotor , unlocking door*/
    11da:	0e 94 8a 09 	call	0x1314	; 0x1314 <openDoor>
			/* return to know user option , Re-turn to step take operation from user*/
			systemOperation();
    11de:	0e 94 56 09 	call	0x12ac	; 0x12ac <systemOperation>
			/* Agreement between two ECUs*/
			while(UART_recieveByte() != MC2_READY_TO_GET_USER_PASS);
    11e2:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_recieveByte>
    11e6:	8e 3e       	cpi	r24, 0xEE	; 238
    11e8:	e1 f7       	brne	.-8      	; 0x11e2 <systemRun+0x8c>
			/* take user pass*/
			recievePass(userpass);
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	0e 94 b5 07 	call	0xf6a	; 0xf6a <recievePass>
			/* start running system again*/
			systemRun(userpass,newpass,samepass);
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	2b 81       	ldd	r18, Y+3	; 0x03
    11f8:	3c 81       	ldd	r19, Y+4	; 0x04
    11fa:	4d 81       	ldd	r20, Y+5	; 0x05
    11fc:	5e 81       	ldd	r21, Y+6	; 0x06
    11fe:	b9 01       	movw	r22, r18
    1200:	0e 94 ab 08 	call	0x1156	; 0x1156 <systemRun>
    1204:	4a c0       	rjmp	.+148    	; 0x129a <systemRun+0x144>
			break;
		case '-' :
			/* recieve change pass , And start Runnig system again*/
			checkOnPass(newpass,samepass,userpass);
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	2d 81       	ldd	r18, Y+5	; 0x05
    120c:	3e 81       	ldd	r19, Y+6	; 0x06
    120e:	49 81       	ldd	r20, Y+1	; 0x01
    1210:	5a 81       	ldd	r21, Y+2	; 0x02
    1212:	b9 01       	movw	r22, r18
    1214:	0e 94 df 07 	call	0xfbe	; 0xfbe <checkOnPass>

			systemRun(userpass,newpass,samepass);
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	4d 81       	ldd	r20, Y+5	; 0x05
    1222:	5e 81       	ldd	r21, Y+6	; 0x06
    1224:	b9 01       	movw	r22, r18
    1226:	0e 94 ab 08 	call	0x1156	; 0x1156 <systemRun>
    122a:	37 c0       	rjmp	.+110    	; 0x129a <systemRun+0x144>
		}
	}
	break;
	/* Case False user pass*/
	case FALSE :
		UART_sendByte(USER_PASS_IS_FALSE);		/* Send Result to HMI_ECU*/
    122c:	86 e1       	ldi	r24, 0x16	; 22
    122e:	0e 94 9c 05 	call	0xb38	; 0xb38 <UART_sendByte>
		/* increment failed attemps*/
		failedAttemp++;
    1232:	80 91 72 00 	lds	r24, 0x0072
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	80 93 72 00 	sts	0x0072, r24
		/* Check if failed attemps reach to three attemps continous*/
		switch(failedAttemp)
    123c:	80 91 72 00 	lds	r24, 0x0072
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	b9 f4       	brne	.+46     	; 0x1278 <systemRun+0x122>
		{
		case 3:
			failedAttemp=0;		/* clear failed attemps*/
    124a:	10 92 72 00 	sts	0x0072, r1
			/* Turn on Buzzer for 60 minute*/
			activeBuzzzer();
    124e:	0e 94 ad 09 	call	0x135a	; 0x135a <activeBuzzzer>
			/* Re-turb again to know which new operation that user need*/
			systemOperation();
    1252:	0e 94 56 09 	call	0x12ac	; 0x12ac <systemOperation>
			/* Agreement between two ECUs*/
			while(UART_recieveByte() != MC2_READY_TO_GET_USER_PASS);
    1256:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_recieveByte>
    125a:	8e 3e       	cpi	r24, 0xEE	; 238
    125c:	e1 f7       	brne	.-8      	; 0x1256 <systemRun+0x100>
			/* take user pass*/
			recievePass(userpass);
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	0e 94 b5 07 	call	0xf6a	; 0xf6a <recievePass>
			/* start running system again*/
			systemRun(userpass,newpass,samepass);
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	4d 81       	ldd	r20, Y+5	; 0x05
    1270:	5e 81       	ldd	r21, Y+6	; 0x06
    1272:	b9 01       	movw	r22, r18
    1274:	0e 94 ab 08 	call	0x1156	; 0x1156 <systemRun>
			break;
		}
		/* Agreement between two ECUs*/
		while(UART_recieveByte() != MC2_READY_TO_GET_USER_PASS);
    1278:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_recieveByte>
    127c:	8e 3e       	cpi	r24, 0xEE	; 238
    127e:	e1 f7       	brne	.-8      	; 0x1278 <systemRun+0x122>
		/* take user pass*/
		recievePass(userpass);
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	0e 94 b5 07 	call	0xf6a	; 0xf6a <recievePass>
		/* start running system again*/
		systemRun(userpass,newpass,samepass);
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	2b 81       	ldd	r18, Y+3	; 0x03
    128e:	3c 81       	ldd	r19, Y+4	; 0x04
    1290:	4d 81       	ldd	r20, Y+5	; 0x05
    1292:	5e 81       	ldd	r21, Y+6	; 0x06
    1294:	b9 01       	movw	r22, r18
    1296:	0e 94 ab 08 	call	0x1156	; 0x1156 <systemRun>
		break;
	}
}
    129a:	2a 96       	adiw	r28, 0x0a	; 10
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <systemOperation>:
/************************************************************
 * Function Name :systemOperation()                         *
 * Description   : Know the operation from HMI_ECU          *
 ************************************************************/
void systemOperation(void)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
	/* To save user options in Global variable to use it when starts the system*/
	SystemOperation=UART_recieveByte();
    12b4:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_recieveByte>
    12b8:	80 93 74 00 	sts	0x0074, r24
}
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <writeEEPROM>:
/**************************************************************
 * Function Name : writeEEPROM()                              *
 * Description   : Write in EEPROM in Assumption address      *
 **************************************************************/
void writeEEPROM(uint8 arr4[])
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <writeEEPROM+0x6>
    12c8:	0f 92       	push	r0
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	9b 83       	std	Y+3, r25	; 0x03
    12d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 k;
	/* Write pass in EEPROM*/
	for(k=0 ;k<PASS_SIZE ;k++)
    12d2:	19 82       	std	Y+1, r1	; 0x01
    12d4:	16 c0       	rjmp	.+44     	; 0x1302 <writeEEPROM+0x40>
	{
		EEPROM_writeByte((0x0C32)+k ,arr4[k]);
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	8e 5c       	subi	r24, 0xCE	; 206
    12de:	93 4f       	sbci	r25, 0xF3	; 243
    12e0:	ac 01       	movw	r20, r24
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	9b 81       	ldd	r25, Y+3	; 0x03
    12ec:	fc 01       	movw	r30, r24
    12ee:	e2 0f       	add	r30, r18
    12f0:	f3 1f       	adc	r31, r19
    12f2:	20 81       	ld	r18, Z
    12f4:	ca 01       	movw	r24, r20
    12f6:	62 2f       	mov	r22, r18
    12f8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <EEPROM_writeByte>
 **************************************************************/
void writeEEPROM(uint8 arr4[])
{
	uint8 k;
	/* Write pass in EEPROM*/
	for(k=0 ;k<PASS_SIZE ;k++)
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	85 30       	cpi	r24, 0x05	; 5
    1306:	38 f3       	brcs	.-50     	; 0x12d6 <writeEEPROM+0x14>
	{
		EEPROM_writeByte((0x0C32)+k ,arr4[k]);
	}

}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <openDoor>:
/**************************************
 * Function Name :openDoor()          *
 * Description   : Turn on Dc-Motor   *
 **************************************/
void openDoor(void)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
	/* Turn on DC motor in Maximum speed in CW*/
	DcMotor_Rotate(CW_DcMotor ,255);
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	6f ef       	ldi	r22, 0xFF	; 255
    1320:	0e 94 72 06 	call	0xce4	; 0xce4 <DcMotor_Rotate>
	/* count 15 sec from timer1*/
	myOwnDelay(15);
    1324:	8f e0       	ldi	r24, 0x0F	; 15
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 c8 09 	call	0x1390	; 0x1390 <myOwnDelay>
	/* turn off DcMotor*/
	DcMotor_Rotate(STOP_DcMotor ,0);
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	0e 94 72 06 	call	0xce4	; 0xce4 <DcMotor_Rotate>
	/* count 3 sec fro timer 1*/
	myOwnDelay(3);
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	0e 94 c8 09 	call	0x1390	; 0x1390 <myOwnDelay>
	/* Turn on DC motor in Maximum speed in CCW*/
	DcMotor_Rotate(A_CW_DcMotor ,255);
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	6f ef       	ldi	r22, 0xFF	; 255
    1340:	0e 94 72 06 	call	0xce4	; 0xce4 <DcMotor_Rotate>
	/* count 15 sec from timer1*/
	myOwnDelay(15);
    1344:	8f e0       	ldi	r24, 0x0F	; 15
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 c8 09 	call	0x1390	; 0x1390 <myOwnDelay>
	/* turn off DcMotor*/
	DcMotor_Rotate(STOP_DcMotor ,0);
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	0e 94 72 06 	call	0xce4	; 0xce4 <DcMotor_Rotate>
}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <activeBuzzzer>:
/**********************************************
 * Function Name : activeBuzzzer()            *
 * Description   : Active buzzer for 1 minute *
 **********************************************/
void activeBuzzzer(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	/* Start turn on Buzzer*/
	BUZZER_on();
    1362:	0e 94 3f 06 	call	0xc7e	; 0xc7e <BUZZER_on>
	/* Count 60 sec from timer1*/
	myOwnDelay(60);
    1366:	8c e3       	ldi	r24, 0x3C	; 60
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 c8 09 	call	0x1390	; 0x1390 <myOwnDelay>
	/* Turn off Buzzer again*/
	BUZZER_off();
    136e:	0e 94 4b 06 	call	0xc96	; 0xc96 <BUZZER_off>
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <timerTicks>:
/***********************************************************
 * Function Name : timerTicks()                            *
 * Description: Just increment num. of ticks in timer 1s   *
 ***********************************************************/
void timerTicks(void)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1380:	80 91 73 00 	lds	r24, 0x0073
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	80 93 73 00 	sts	0x0073, r24
}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <myOwnDelay>:
/*************************************************************************************
 * Function Name : myOwnDelay()                                                      *
 * Description   : initialize timer1 and count until to sec which is input from user *
 *************************************************************************************/
void myOwnDelay(uint16 sec)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	2d 97       	sbiw	r28, 0x0d	; 13
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	98 87       	std	Y+8, r25	; 0x08
    13a6:	8f 83       	std	Y+7, r24	; 0x07
	g_tick=0;
    13a8:	10 92 73 00 	sts	0x0073, r1
	 * 1.Initial value = 0                         *
	 * 2.compare value(in ctc mode) not used = 0   *
	 * 3.prescaler = 64                            *
	 * 4.mode of operation = Normal                *
	 ***********************************************/
	Timer1_ConfigType Timer1_Confige = { 0 ,0 , F_CPU_64 , NORMAL_Mode};
    13ac:	ce 01       	movw	r24, r28
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	9a 87       	std	Y+10, r25	; 0x0a
    13b2:	89 87       	std	Y+9, r24	; 0x09
    13b4:	e7 e6       	ldi	r30, 0x67	; 103
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	fc 87       	std	Y+12, r31	; 0x0c
    13ba:	eb 87       	std	Y+11, r30	; 0x0b
    13bc:	f6 e0       	ldi	r31, 0x06	; 6
    13be:	fd 87       	std	Y+13, r31	; 0x0d
    13c0:	eb 85       	ldd	r30, Y+11	; 0x0b
    13c2:	fc 85       	ldd	r31, Y+12	; 0x0c
    13c4:	00 80       	ld	r0, Z
    13c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    13c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	9c 87       	std	Y+12, r25	; 0x0c
    13ce:	8b 87       	std	Y+11, r24	; 0x0b
    13d0:	e9 85       	ldd	r30, Y+9	; 0x09
    13d2:	fa 85       	ldd	r31, Y+10	; 0x0a
    13d4:	00 82       	st	Z, r0
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	9a 87       	std	Y+10, r25	; 0x0a
    13de:	89 87       	std	Y+9, r24	; 0x09
    13e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    13e2:	91 50       	subi	r25, 0x01	; 1
    13e4:	9d 87       	std	Y+13, r25	; 0x0d
    13e6:	ed 85       	ldd	r30, Y+13	; 0x0d
    13e8:	ee 23       	and	r30, r30
    13ea:	51 f7       	brne	.-44     	; 0x13c0 <myOwnDelay+0x30>
	Timer1_init(&Timer1_Confige);
    13ec:	ce 01       	movw	r24, r28
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	0e 94 09 04 	call	0x812	; 0x812 <Timer1_init>

	/* Used call back which call in ISR for time1*/
	Timer1_setCallBack(timerTicks);
    13f4:	8c eb       	ldi	r24, 0xBC	; 188
    13f6:	99 e0       	ldi	r25, 0x09	; 9
    13f8:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <Timer1_setCallBack>

	/* Delay */
	while(g_tick < (2*sec));
    13fc:	80 91 73 00 	lds	r24, 0x0073
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8f 81       	ldd	r24, Y+7	; 0x07
    1406:	98 85       	ldd	r25, Y+8	; 0x08
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	28 17       	cp	r18, r24
    140e:	39 07       	cpc	r19, r25
    1410:	a8 f3       	brcs	.-22     	; 0x13fc <myOwnDelay+0x6c>

	/* Deinitialization of timer1*/
	Timer1_deInit();
    1412:	0e 94 57 04 	call	0x8ae	; 0x8ae <Timer1_deInit>

}
    1416:	2d 96       	adiw	r28, 0x0d	; 13
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <__udivmodsi4>:
    1428:	a1 e2       	ldi	r26, 0x21	; 33
    142a:	1a 2e       	mov	r1, r26
    142c:	aa 1b       	sub	r26, r26
    142e:	bb 1b       	sub	r27, r27
    1430:	fd 01       	movw	r30, r26
    1432:	0d c0       	rjmp	.+26     	; 0x144e <__udivmodsi4_ep>

00001434 <__udivmodsi4_loop>:
    1434:	aa 1f       	adc	r26, r26
    1436:	bb 1f       	adc	r27, r27
    1438:	ee 1f       	adc	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	a2 17       	cp	r26, r18
    143e:	b3 07       	cpc	r27, r19
    1440:	e4 07       	cpc	r30, r20
    1442:	f5 07       	cpc	r31, r21
    1444:	20 f0       	brcs	.+8      	; 0x144e <__udivmodsi4_ep>
    1446:	a2 1b       	sub	r26, r18
    1448:	b3 0b       	sbc	r27, r19
    144a:	e4 0b       	sbc	r30, r20
    144c:	f5 0b       	sbc	r31, r21

0000144e <__udivmodsi4_ep>:
    144e:	66 1f       	adc	r22, r22
    1450:	77 1f       	adc	r23, r23
    1452:	88 1f       	adc	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	1a 94       	dec	r1
    1458:	69 f7       	brne	.-38     	; 0x1434 <__udivmodsi4_loop>
    145a:	60 95       	com	r22
    145c:	70 95       	com	r23
    145e:	80 95       	com	r24
    1460:	90 95       	com	r25
    1462:	9b 01       	movw	r18, r22
    1464:	ac 01       	movw	r20, r24
    1466:	bd 01       	movw	r22, r26
    1468:	cf 01       	movw	r24, r30
    146a:	08 95       	ret

0000146c <_exit>:
    146c:	f8 94       	cli

0000146e <__stop_program>:
    146e:	ff cf       	rjmp	.-2      	; 0x146e <__stop_program>
